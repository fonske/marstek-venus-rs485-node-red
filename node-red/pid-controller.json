[
    {
        "id": "06b3944959a8c9e5",
        "type": "tab",
        "label": "Marstek Battery Control",
        "disabled": false,
        "info": "Marstek Thuisaccu aansturing",
        "env": []
    },
    {
        "id": "760c12e5a241d59b",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "Batteries",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "9c94c1708ef8d4e8",
            "8be02043314884ad",
            "cbb584b5e11fea3b",
            "1a9c167d31d512d8",
            "07098d162fab6621",
            "e45e30b5706b207a",
            "75298266078706e2",
            "6e47693f2ce1f5a0",
            "310452d4ba772f41",
            "76821bfb2e8f62dd",
            "930fb3974fdc6034",
            "cf313a80c55fbacd",
            "83d6b265263a2d80",
            "03766fa3c387d2c0",
            "507479381478aaa1",
            "7adf93e00bc14b7f",
            "1bd70c685d2ce07c"
        ],
        "x": 14,
        "y": 159,
        "w": 652,
        "h": 542
    },
    {
        "id": "dc0d551e47532969",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "PID control inputs",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "c55c0c2c09d77bda",
            "b676ab867313778e",
            "6b2eb901b9c21026",
            "44659538d79a8b30",
            "057c9730d3e11536"
        ],
        "x": 14,
        "y": 739,
        "w": 652,
        "h": 142
    },
    {
        "id": "bfd83a5e0b51b7e6",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "Master control switch",
        "style": {
            "stroke": "#0070c0",
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "571d056cdce47d40",
            "7357d7320f160192",
            "ce4876fe4fba284a",
            "32ab494c1831fdb2",
            "05d718f8a36f75fa",
            "0a3758bf79a492e3",
            "d8b6fed17f997bf4",
            "b272d2ca7fc1536b",
            "96b45840d80866f2",
            "e6ec61caa46eaf0a"
        ],
        "x": 14,
        "y": 959,
        "w": 912,
        "h": 242
    },
    {
        "id": "2ca8c34830957273",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "Start",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "0dbec83be12cd0eb",
            "d0c0926b6f4064e3",
            "bed2c59d49d7c95e"
        ],
        "x": 14,
        "y": 39,
        "w": 652,
        "h": 82
    },
    {
        "id": "81abb3b009673e2d",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "PID controller",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "3a2bdfa9202326b9",
            "e14f670d48797225",
            "b5d62d051fad6dc3",
            "99aecbee60e4aa5e",
            "d78ac8389a17c82e",
            "236f95be72d4f3e4",
            "6e6f4d489a4c9ad3",
            "6074ee3ed61121b1",
            "767135ac9efe3b91",
            "bc1d3a1afc2150e1",
            "92728e6480949ca4"
        ],
        "x": 1054,
        "y": 19,
        "w": 852,
        "h": 442
    },
    {
        "id": "01ba2e0cd261fb0b",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "Command batteries",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "752ed7cd1b264b2c",
            "4a736d8691a505db",
            "4ff7084b13ec95fb",
            "8fbd5e525725812d",
            "4cd5d6d88cc41a09",
            "00843655a926c41b",
            "6745cb48407597aa",
            "d9e04b7a7e98960f",
            "dfe983225f1fe7e7",
            "3794cac417adfc3c"
        ],
        "x": 1054,
        "y": 479,
        "w": 892,
        "h": 322
    },
    {
        "id": "66935d9bb6f3d9e5",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "JSON",
        "style": {
            "label": true
        },
        "nodes": [
            "b43a671efb747d0b",
            "1eb7a17d0b88fd2e",
            "4636dfc46eb2a2d9"
        ],
        "x": 694,
        "y": 39,
        "w": 332,
        "h": 122
    },
    {
        "id": "d6dd0b7d8f681805",
        "type": "group",
        "z": "06b3944959a8c9e5",
        "name": "Bumpless operation",
        "style": {
            "label": true
        },
        "nodes": [
            "ee88a9e8a9ef6ee8",
            "1a08421e85940890"
        ],
        "x": 694,
        "y": 739,
        "w": 332,
        "h": 142
    },
    {
        "id": "0dbec83be12cd0eb",
        "type": "server-state-changed",
        "z": "06b3944959a8c9e5",
        "g": "2ca8c34830957273",
        "name": "P1 meter",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "sensor.p1_meter_vermogen"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "p1_meter_vermogen",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 100,
        "y": 80,
        "wires": [
            [
                "d0c0926b6f4064e3"
            ]
        ]
    },
    {
        "id": "9c94c1708ef8d4e8",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m1_battery_power",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "marstek_m1_battery_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "8be02043314884ad"
            ]
        ]
    },
    {
        "id": "8be02043314884ad",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m2_battery_power",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_battery_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "83d6b265263a2d80"
            ]
        ]
    },
    {
        "id": "cbb584b5e11fea3b",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 control mode",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "select.marstek_m1_rs485_control_mode",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m1_rs485_control_mode",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "1a9c167d31d512d8"
            ]
        ]
    },
    {
        "id": "1a9c167d31d512d8",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 control mode",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "select.marstek_m2_rs485_control_mode",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_rs485_control_mode",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "9c94c1708ef8d4e8"
            ]
        ]
    },
    {
        "id": "b43a671efb747d0b",
        "type": "function",
        "z": "06b3944959a8c9e5",
        "g": "66935d9bb6f3d9e5",
        "name": "Mapping",
        "func": "\n\nvar M1_power = flow.get(\"marstek_m1_battery_power\");    // charging is positive, discharge is negative\nvar M2_power = flow.get(\"marstek_m2_battery_power\");    // charging is positive, discharge is negative\n\nvar M1_charging_max = flow.get(\"marstek_m1_max_charge_power\"); // W\nvar M2_charging_max = flow.get(\"marstek_m2_max_charge_power\"); // W\nvar M1_discharging_max = flow.get(\"marstek_m1_max_discharge_power\");\nvar M2_discharging_max = flow.get(\"marstek_m2_max_discharge_power\");\n\nvar M1_control_mode = flow.get(\"marstek_m1_rs485_control_mode\"); // enable/disable\nvar M2_control_mode = flow.get(\"marstek_m2_rs485_control_mode\"); // enable/disable\n\nvar M1_soc = Number(flow.get(\"marstek_m1_battery_state_of_charge\"));         //%\nvar M1_soc_min = Number(flow.get(\"marstek_m1_discharging_cutoff_capacity\")); //%\nvar M1_soc_max = Number(flow.get(\"marstek_m1_charging_cutoff_capacity\"));    //%\nvar M2_soc = Number(flow.get(\"marstek_m2_battery_state_of_charge\"));         //%\nvar M2_soc_min = Number(flow.get(\"marstek_m2_discharging_cutoff_capacity\")); //%\nvar M2_soc_max = Number(flow.get(\"marstek_m2_charging_cutoff_capacity\"));    //%\n\n//--    Battery list\nlet battery_array = [\n    { id: \"M1\", \n      power: M1_power, charging_max: M1_charging_max, discharging_max: M1_discharging_max,\n      soc: M1_soc, soc_min: M1_soc_min, soc_max: M1_soc_max,\n      rs485: M1_control_mode \n    },\n    { id: \"M2\", \n      power: M2_power, charging_max: M2_charging_max, discharging_max: M2_discharging_max,\n      soc: M2_soc, soc_min: M2_soc_min, soc_max: M2_soc_max,\n      rs485: M2_control_mode \n    }//,\n    // { id: \"M3\", \n    //   power: M3_power, charging_max: M3_charging_max, discharging_max: M3_discharging_max,\n    //   power_set: 0, // what power level should be set next\n    //   soc: M3_soc, soc_min: M3_soc_min, soc_max: M3_soc_max,\n    //   rs485: M3_control_mode \n    // }\n];\n\n// -- payload\nreturn {payload: battery_array};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "1eb7a17d0b88fd2e",
                "4636dfc46eb2a2d9"
            ]
        ]
    },
    {
        "id": "07098d162fab6621",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 SoC",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m1_battery_state_of_charge",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m1_battery_state_of_charge",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "e45e30b5706b207a"
            ]
        ]
    },
    {
        "id": "e45e30b5706b207a",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 SoC",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m2_battery_state_of_charge",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_battery_state_of_charge",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 340,
        "y": 480,
        "wires": [
            [
                "310452d4ba772f41"
            ]
        ]
    },
    {
        "id": "75298266078706e2",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 inverter state",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m1_inverter_state",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "M1_inverter_state",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "6e47693f2ce1f5a0"
            ]
        ]
    },
    {
        "id": "6e47693f2ce1f5a0",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 inverter state",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m2_inverter_state",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "M2_inverter_state",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 370,
        "y": 660,
        "wires": [
            [
                "c55c0c2c09d77bda"
            ]
        ]
    },
    {
        "id": "d0c0926b6f4064e3",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "2ca8c34830957273",
        "name": "Master Control Mode",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.marstek_master_battery_mode",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "master_mode",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "bed2c59d49d7c95e"
            ]
        ]
    },
    {
        "id": "571d056cdce47d40",
        "type": "switch",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Check for custom/auto mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Manual control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Marstek control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Full control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 255,
        "y": 1040,
        "wires": [
            [
                "ce4876fe4fba284a",
                "32ab494c1831fdb2"
            ],
            [
                "ce4876fe4fba284a"
            ],
            [
                "05d718f8a36f75fa"
            ]
        ],
        "l": false
    },
    {
        "id": "7357d7320f160192",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Master control switch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1160,
        "wires": []
    },
    {
        "id": "310452d4ba772f41",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 SoC min",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m1_discharging_cutoff_capacity",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m1_discharging_cutoff_capacity",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "76821bfb2e8f62dd"
            ]
        ]
    },
    {
        "id": "76821bfb2e8f62dd",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 SoC min",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m2_discharging_cutoff_capacity",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_discharging_cutoff_capacity",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 540,
        "wires": [
            [
                "930fb3974fdc6034"
            ]
        ]
    },
    {
        "id": "930fb3974fdc6034",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 SoC max",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m1_charging_cutoff_capacity",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m1_charging_cutoff_capacity",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "cf313a80c55fbacd"
            ]
        ]
    },
    {
        "id": "cf313a80c55fbacd",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 SoC max",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m2_charging_cutoff_capacity",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_charging_cutoff_capacity",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 600,
        "wires": [
            [
                "75298266078706e2"
            ]
        ]
    },
    {
        "id": "83d6b265263a2d80",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 max charge power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m1_max_charge_power",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m1_max_charge_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "03766fa3c387d2c0"
            ]
        ]
    },
    {
        "id": "03766fa3c387d2c0",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 max charge power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m2_max_charge_power",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_max_charge_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "507479381478aaa1"
            ]
        ]
    },
    {
        "id": "507479381478aaa1",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M1 max discharge power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m1_max_discharge_power",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m1_max_discharge_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "7adf93e00bc14b7f"
            ]
        ]
    },
    {
        "id": "7adf93e00bc14b7f",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "M2 max discharge power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m2_max_discharge_power",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "marstek_m2_max_discharge_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 390,
        "y": 400,
        "wires": [
            [
                "07098d162fab6621"
            ]
        ]
    },
    {
        "id": "3a2bdfa9202326b9",
        "type": "function",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Calculate corrections",
        "func": "var logdata = \"\";\n\n// Timing\nlet time_last = context.get('time_last') || Date.now(); // Milliseconds\nlet time_current = Date.now(); // Milliseconds\nlet time_delta = (time_current - time_last) / 1000; // Convert to seconds\n// note: due to inherent 1 sec intervals of P1 meter we omit dt terms. This is mostly for bug checking and optimizations.\n\n// Batteries\nvar batteries = msg.payload;\nvar B_power = flow.get(\"batteries_total_power\"); // charging is positive, discharging negative\nvar anti_windup_threshold = Number(flow.get(\"batteries_total_assignable_power\")) || 0; // max available charge/discharge power.\n\n// Process Variable (PV) currently measured grid power, Setpoint (SP) desired grid power, set 0 for NoM\nvar P1_power = flow.get(\"p1_meter_vermogen\"); // PV: consume is positive, supply to grid is negative\nvar P1_setpoint = flow.get(\"house_target_grid_consumption_in_w\"); // SP: target value\nvar P1_error = P1_setpoint - P1_power;  // W (watt), error signal = SP - PV\n\n// PID values\nvar Kp = flow.get(\"house_battery_control_kp\") || 0.75;  // Proportional gain\nvar Ki = flow.get(\"house_battery_control_ki\") || 0;     // Integral gain        Ki = Kp/Ti\nvar Kd = flow.get(\"house_battery_control_kd\") || 0;     // Derivative gain      Kd = Kp*Td\n\n// helpers\nvar integral_sum = context.get('integral_sum') || 0;\nvar P1_last_error = context.get('P1_last_error') || 0;\n\n// optimizations\nvar hysteresis = flow.get(\"house_battery_control_hysteresis_in_w\"); // W (watt)\n\n// -- PID regulator --\n// Proportional term\nlet p_term = Kp * P1_error;\n\n// Integral term\nintegral_sum += P1_error; \n\n// apply anti-windup \nlet integral_max = anti_windup_threshold / Ki; // improve: anti-windup should only trigger when exceeding the max controlable range\nintegral_sum = Math.min(Math.max(integral_sum, -integral_max), integral_max);\nlet i_term = Ki * integral_sum;\n\n// Differential term\nlet d_term = Kd * (P1_error - P1_last_error); // omitted '/time_delta'. inherent P1 refresh fequency.\n\n// Total PID output\nvar PID_output = p_term + i_term + d_term; // W (watt), the control input for the battery packs\nlogdata += `U(${time_delta}s)[${PID_output}] = P(${Kp})[${p_term}] + I(${Ki})[${i_term}] + D(${Kd})[${d_term}] | `;\n\n// Charging or Discharging states\nvar B_was_charging = context.get(\"batteries_charging_last\") || false;\nvar B_is_charging = PID_output > 0 ? true : false;\n\n// Hysteresis mode: prevents excessive switching between (dis)charge mode around the zero point.\n// if new PID_output lies within hysteresis, it will not switch. 0 = apply no hysteresis\nif (B_is_charging !== B_was_charging && Math.abs(PID_output) < hysteresis){\n    // log explain\n    logdata += `Hysteresis prevented charge mode switch from ${B_was_charging ? \"charging\" : \"discharging\"} to ${B_is_charging ? \"charging\" : \"discharging\"} as ${Math.abs(PID_output)}W <= ${hysteresis}(hyst) | `;\n    // prevent negative charging or positive discharging values (not allowed)\n    PID_output = (PID_output < 0 && B_is_charging) || ((PID_output > 0 && !B_is_charging)) ? 0 : PID_output;\n    // maintain previous scenario\n    B_is_charging = B_was_charging;\n    \n} else {\n    // save for next iteration\n    context.set(\"batteries_charging_last\", B_is_charging); //boolean\n}\n\n// OUTPUT\nflow.set(\"batteries\", batteries);\nflow.set(\"p1_error\", P1_error);\nflow.set(\"batteries_charging\", B_is_charging)\ncontext.set(\"time_last\", Date.now());\ncontext.set(\"integral_sum\", integral_sum);\ncontext.set(\"P1_last_error\", P1_error);\n\nreturn [{ payload: Number(PID_output) },\n        { payload: Number(P1_error)},\n        { payload: parseFloat(p_term)},\n        { payload: parseFloat(i_term)},\n        { payload: parseFloat(d_term)},\n        { payload: B_is_charging},\n        { payload: logdata }];",
        "outputs": 7,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 120,
        "wires": [
            [
                "d78ac8389a17c82e",
                "3794cac417adfc3c"
            ],
            [
                "b5d62d051fad6dc3"
            ],
            [
                "6e6f4d489a4c9ad3"
            ],
            [
                "6074ee3ed61121b1"
            ],
            [
                "767135ac9efe3b91"
            ],
            [
                "92728e6480949ca4"
            ],
            [
                "e14f670d48797225"
            ]
        ],
        "inputLabels": [
            "battery_array"
        ]
    },
    {
        "id": "1eb7a17d0b88fd2e",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "66935d9bb6f3d9e5",
        "name": "Batteries",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 80,
        "wires": []
    },
    {
        "id": "c55c0c2c09d77bda",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "dc0d551e47532969",
        "name": "Target grid consumption",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_target_grid_consumption_in_w",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_target_grid_consumption_in_w",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "b676ab867313778e"
            ]
        ],
        "info": "Set at 0 to strive for zero consumption"
    },
    {
        "id": "4636dfc46eb2a2d9",
        "type": "function",
        "z": "06b3944959a8c9e5",
        "g": "66935d9bb6f3d9e5",
        "name": "Total power",
        "func": "// calculate total power delivered by batteries\nlet total_power = 0;\nmsg.payload.forEach(battery => {\n    total_power += Number(battery.power);\n});\nflow.set(\"batteries_total_power\", total_power);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 120,
        "wires": [
            [
                "3a2bdfa9202326b9"
            ]
        ]
    },
    {
        "id": "752ed7cd1b264b2c",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "M1 Forcible mode",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 520,
        "wires": []
    },
    {
        "id": "4a736d8691a505db",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "M1 power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 580,
        "wires": []
    },
    {
        "id": "4ff7084b13ec95fb",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "M2 Forcible mode",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 640,
        "wires": []
    },
    {
        "id": "8fbd5e525725812d",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "M2 power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 700,
        "wires": []
    },
    {
        "id": "4cd5d6d88cc41a09",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "Logdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 760,
        "wires": []
    },
    {
        "id": "e14f670d48797225",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Logdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 420,
        "wires": []
    },
    {
        "id": "00843655a926c41b",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "Output charge/discharge/stop M1",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.marstek_m1_forcible_charge_discharge"
        ],
        "labelId": [],
        "data": "{\"option\":\"{{ payload }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "select",
        "service": "select_option",
        "x": 1560,
        "y": 520,
        "wires": [
            [
                "752ed7cd1b264b2c"
            ]
        ]
    },
    {
        "id": "6745cb48407597aa",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "Output charge/discharge/stop M2",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.marstek_m2_forcible_charge_discharge"
        ],
        "labelId": [],
        "data": "{\"option\":\"{{ payload }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "select",
        "service": "select_option",
        "x": 1560,
        "y": 640,
        "wires": [
            [
                "4ff7084b13ec95fb"
            ]
        ]
    },
    {
        "id": "d9e04b7a7e98960f",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "Output (dis)charge power M1",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.marstek_m1_forcible_discharge_power",
            "number.marstek_m1_forcible_charge_power"
        ],
        "labelId": [],
        "data": "{\"value\":\"{{ payload }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 1540,
        "y": 580,
        "wires": [
            [
                "4a736d8691a505db"
            ]
        ]
    },
    {
        "id": "dfe983225f1fe7e7",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "Output (dis)charge power M2",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.marstek_m2_forcible_discharge_power",
            "number.marstek_m2_forcible_charge_power"
        ],
        "labelId": [],
        "data": "{\"value\":\"{{ payload }}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "number",
        "service": "set_value",
        "x": 1540,
        "y": 700,
        "wires": [
            [
                "8fbd5e525725812d"
            ]
        ]
    },
    {
        "id": "ce4876fe4fba284a",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Set ALL Rs485 disable",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.marstek_m1_rs485_control_mode",
            "select.marstek_m2_rs485_control_mode"
        ],
        "labelId": [],
        "data": "{   \"option\": \"disable\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "select",
        "service": "select_option",
        "mergecontext": "",
        "x": 420,
        "y": 1040,
        "wires": [
            [
                "96b45840d80866f2",
                "7357d7320f160192"
            ]
        ]
    },
    {
        "id": "32ab494c1831fdb2",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Set ALL to manual work mode",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.marstek_m1_user_work_mode",
            "select.marstek_m2_user_work_mode"
        ],
        "labelId": [],
        "data": "{   \"option\": \"manual\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "select",
        "service": "select_option",
        "mergecontext": "",
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "7357d7320f160192"
            ]
        ]
    },
    {
        "id": "05d718f8a36f75fa",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Set ALL Rs485 enable",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "select.marstek_m1_rs485_control_mode",
            "select.marstek_m2_rs485_control_mode"
        ],
        "labelId": [],
        "data": "{   \"option\": \"enable\" }",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "select",
        "service": "select_option",
        "mergecontext": "",
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "7357d7320f160192"
            ]
        ]
    },
    {
        "id": "bed2c59d49d7c95e",
        "type": "switch",
        "z": "06b3944959a8c9e5",
        "g": "2ca8c34830957273",
        "name": "when in \"Full Control\" mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Full control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "cbb584b5e11fea3b"
            ]
        ]
    },
    {
        "id": "0a3758bf79a492e3",
        "type": "server-state-changed",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Master control mode",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_select.marstek_master_battery_mode"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "571d056cdce47d40"
            ]
        ]
    },
    {
        "id": "b5d62d051fad6dc3",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Error Signal",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_error_signal"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1470,
        "y": 120,
        "wires": [
            [
                "99aecbee60e4aa5e",
                "bc1d3a1afc2150e1"
            ]
        ]
    },
    {
        "id": "99aecbee60e4aa5e",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "(e) error signal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 120,
        "wires": []
    },
    {
        "id": "d78ac8389a17c82e",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "PID Output",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1470,
        "y": 60,
        "wires": [
            [
                "236f95be72d4f3e4",
                "bc1d3a1afc2150e1"
            ]
        ]
    },
    {
        "id": "3794cac417adfc3c",
        "type": "function",
        "z": "06b3944959a8c9e5",
        "g": "01ba2e0cd261fb0b",
        "name": "Load distribution",
        "func": "// INPUT\nvar batteries = flow.get(\"batteries\");\nvar isCharging = flow.get(\"batteries_charging\"); // Are we in a battery charging scenario?\nvar logdata = `Charging?=${isCharging} | `; // logging\n// how much power do the batteries need to compensate?\nvar unassigned_power = Math.abs(msg.payload); // Power in W to compensate using batteries\n\n// inits \nvar output_array = []; // node outputs\nvar batteries_total_assignable_power = 0; // Current max. available total (dis)charge power. Exceeding this max should trigger the anti-windup routine for the Integral terms\n\n// battery life improvement (slow charge near max SoC)\n/**\n* @param {number} soc\n* @param {number} max_power\n*/\nfunction chargingLimiter(soc, max_power) {\n    if(max_power < 0) max_power = 0;\n    if (soc >= 98) return Math.min(200, max_power);\n    if (soc >= 95) return Math.min(500, max_power);\n    if (soc >= 90) return Math.min(1500, max_power);\n    return max_power;\n}\n\n// -- LOAD BALANCER --\nbatteries.forEach((/** @type {{ soc: number; soc_max: number; soc_min: number; rs485: string; id: any; charging_max: any; discharging_max: any; }} */ battery) =>{\n    // Step 1. remove unfit batteries\n    if(\n        (battery.soc >= battery.soc_max && isCharging) || \n        (battery.soc <= battery.soc_min && !isCharging) || \n        battery.rs485 !== \"enable\") {\n            // stop forced control \n            output_array.push({payload:\"stop\"});  // forcible mode\n            output_array.push({payload: 0});       // power\n            logdata += `${battery.id}: [inactive] SoC=${battery.soc_max}>**${battery.soc}**>${battery.soc_min}%, rs485=${battery.rs485} | `;\n            // skip this battery\n            return;\n        }\n\n    // Step 2. assign available (dis)charging power\n    let battery_assignable_power = isCharging ? chargingLimiter(battery.soc, battery.charging_max) : battery.discharging_max;\n    let assign = Math.min(unassigned_power, battery_assignable_power); // commit\n\n    // Step 3. set output values\n    output_array.push({payload: isCharging?\"charge\":assign<=0?\"stop\":\"discharge\"});  // forcible mode\n    output_array.push({payload: Math.round(assign * 10) / 10}); // power, round to 1 decimal\n\n    // update tally\n    unassigned_power -= assign;\n    batteries_total_assignable_power += Number(battery_assignable_power);\n});\n\n// OUTFLOW\nflow.set(\"batteries_total_assignable_power\", batteries_total_assignable_power);\nlogdata += `batteries_total_assignable_power ${batteries_total_assignable_power} | `;\n\n// OUTPUT\noutput_array.push({payload: logdata, logtitle: \"Battery charge scenario\"});\nreturn output_array;",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 640,
        "wires": [
            [
                "00843655a926c41b"
            ],
            [
                "d9e04b7a7e98960f"
            ],
            [
                "6745cb48407597aa"
            ],
            [
                "dfe983225f1fe7e7"
            ],
            [
                "4cd5d6d88cc41a09"
            ]
        ],
        "inputLabels": [
            "isCharging (boolean)"
        ]
    },
    {
        "id": "b676ab867313778e",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "dc0d551e47532969",
        "name": "Hysteresis",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_hysteresis_in_w",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_hysteresis_in_w",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 780,
        "wires": [
            [
                "6b2eb901b9c21026"
            ]
        ]
    },
    {
        "id": "6b2eb901b9c21026",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "dc0d551e47532969",
        "name": "PID P-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_kp",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_kp",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "44659538d79a8b30"
            ]
        ]
    },
    {
        "id": "44659538d79a8b30",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "dc0d551e47532969",
        "name": "PID I-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_ki",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_ki",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 840,
        "wires": [
            [
                "057c9730d3e11536"
            ]
        ]
    },
    {
        "id": "057c9730d3e11536",
        "type": "api-current-state",
        "z": "06b3944959a8c9e5",
        "g": "dc0d551e47532969",
        "name": "PID D-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_kd",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_kd",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 570,
        "y": 840,
        "wires": [
            [
                "b43a671efb747d0b"
            ]
        ]
    },
    {
        "id": "1bd70c685d2ce07c",
        "type": "comment",
        "z": "06b3944959a8c9e5",
        "g": "760c12e5a241d59b",
        "name": "Batteries",
        "info": "# Add as many batteries as you like.\n\n## Important\nReview the JSON area to hook your \nsensors to the batteries_array and the\ncorrect properties.",
        "x": 580,
        "y": 280,
        "wires": []
    },
    {
        "id": "236f95be72d4f3e4",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "MV manipulated value",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 60,
        "wires": []
    },
    {
        "id": "6e6f4d489a4c9ad3",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Proportinal term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_p_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1480,
        "y": 180,
        "wires": [
            [
                "bc1d3a1afc2150e1"
            ]
        ]
    },
    {
        "id": "6074ee3ed61121b1",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Integral term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_i_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1470,
        "y": 240,
        "wires": [
            [
                "bc1d3a1afc2150e1"
            ]
        ]
    },
    {
        "id": "767135ac9efe3b91",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Differential term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_d_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1480,
        "y": 300,
        "wires": [
            [
                "bc1d3a1afc2150e1"
            ]
        ]
    },
    {
        "id": "bc1d3a1afc2150e1",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "PID analysis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 180,
        "wires": []
    },
    {
        "id": "92728e6480949ca4",
        "type": "debug",
        "z": "06b3944959a8c9e5",
        "g": "81abb3b009673e2d",
        "name": "Charging",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 360,
        "wires": []
    },
    {
        "id": "d8b6fed17f997bf4",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Integral PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_i_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 770,
        "y": 1040,
        "wires": [
            [
                "b272d2ca7fc1536b"
            ]
        ]
    },
    {
        "id": "b272d2ca7fc1536b",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Differential PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_d_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "e6ec61caa46eaf0a"
            ]
        ]
    },
    {
        "id": "96b45840d80866f2",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "Proportinal PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_p_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 780,
        "y": 1000,
        "wires": [
            [
                "d8b6fed17f997bf4"
            ]
        ]
    },
    {
        "id": "e6ec61caa46eaf0a",
        "type": "api-call-service",
        "z": "06b3944959a8c9e5",
        "g": "bfd83a5e0b51b7e6",
        "name": "PID Output to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 770,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "ee88a9e8a9ef6ee8",
        "type": "server-state-changed",
        "z": "06b3944959a8c9e5",
        "d": true,
        "g": "d6dd0b7d8f681805",
        "name": "User Ki change",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.house_battery_control_ki"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 800,
        "y": 780,
        "wires": [
            [
                "1a08421e85940890"
            ]
        ]
    },
    {
        "id": "1a08421e85940890",
        "type": "function",
        "z": "06b3944959a8c9e5",
        "d": true,
        "g": "d6dd0b7d8f681805",
        "name": "Integral term adjust",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "b7160c838b23dad0",
        "type": "comment",
        "z": "06b3944959a8c9e5",
        "name": "Gain scheduling",
        "info": "https://en.wikipedia.org/wiki/Gain_scheduling\n\nLow power stable usage has a different optimum\nthan high power usage with devices switch on and off\n\nGain scheduling based on power usage and std deveation could \nbring optimal response behavior to both scenarios.",
        "x": 820,
        "y": 340,
        "wires": []
    },
    {
        "id": "2950f978f1fa1bdf",
        "type": "comment",
        "z": "06b3944959a8c9e5",
        "name": "Setpoint ramping / afzwakking",
        "info": "In ramping, the setpoint is gradually moved from its old value to a newly specified value using a linear or first-order differential ramp function. This avoids the discontinuity present in a simple step change.\n\nWith 'afzwakking', as applied by R. Ordelman, the current battery power and the setpoint battery power are combined to a weighted steering value ",
        "x": 860,
        "y": 220,
        "wires": []
    },
    {
        "id": "31b393d2edf2c301",
        "type": "comment",
        "z": "06b3944959a8c9e5",
        "name": "Derivative of the process variable",
        "info": "// Instead of the error value",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "176d29a.6f648d6",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    }
]