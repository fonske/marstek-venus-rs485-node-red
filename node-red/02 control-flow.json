[
    {
        "id": "a028c15749bf6cce",
        "type": "tab",
        "label": "Home Battery Control",
        "disabled": false,
        "info": "# Home battery control\r\nConsists of three flows:\r\n 1.  Input flow\r\n 1.  Control flow\r\n 1.  Master switch flow\r\n\r\n## Control flow\r\nThis is the `Control flow`.\r\n\r\nIt start with the battery_array which is retreived from the `Input flow`.\r\nIf the `Master Switch` is set to `full control`, the `Control flow` is used.\r\nIt determines the charge/discharge based on your PID settings.\r\nIt then sets your batteries to the desired values.",
        "env": []
    },
    {
        "id": "ca60c163b7de7193",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "PID controller",
        "style": {
            "label": true
        },
        "nodes": [
            "b322ccfbcb768127",
            "959f7d7d6c9076d5",
            "dcf6337bde2f7fb1",
            "dff1cfd51a72a13f",
            "f95b402db2e6b730",
            "09e81a2fd79eba06",
            "50c3634fbe9df0fd",
            "3963e3e3d5131913",
            "cc080821ef6c9d6a",
            "ffa7588d2db06862",
            "21d985fd1e3d44f2",
            "8e8b6ae6264f1abb",
            "a406100a569758f2",
            "8307c3f29a8f3395"
        ],
        "x": 134,
        "y": 439,
        "w": 872,
        "h": 482
    },
    {
        "id": "716cf792036b7c9c",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Input",
        "style": {
            "label": true
        },
        "nodes": [
            "42f6f3270bbf8338",
            "9c2fa3a765f271da",
            "957aefd68d9dd137"
        ],
        "x": 134,
        "y": 19,
        "w": 432,
        "h": 142
    },
    {
        "id": "739a25bb96a3bbf8",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Advanced features",
        "style": {
            "label": true
        },
        "nodes": [
            "cd079e224d668f4d"
        ],
        "x": 1274,
        "y": 79,
        "w": 232,
        "h": 82
    },
    {
        "id": "2fe0ec0f0d11a95d",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Bumpless operation - changing target grid consumption",
        "style": {
            "label": true,
            "stroke": "#bfdbef",
            "fill": "#ffffff"
        },
        "nodes": [
            "dface75676a37fa3",
            "a2d6584d1a7ea592",
            "f5e90bceabe1fa6a",
            "07b3c5785a943c50",
            "c96657d461ae5a1c"
        ],
        "x": 474,
        "y": 199,
        "w": 552,
        "h": 202
    },
    {
        "id": "ae7c07fde44d568e",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Bumpless operation",
        "style": {
            "label": true,
            "stroke": "#bfdbef"
        },
        "nodes": [
            "7bd7386c4c02d9c5",
            "d0127e9b1672db58",
            "56f5776eb1734279",
            "3a42b3c5e676e0ec"
        ],
        "x": 1534,
        "y": 19,
        "w": 252,
        "h": 242
    },
    {
        "id": "ef2f7152286659c7",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Power distribution over batteries",
        "style": {
            "label": true
        },
        "nodes": [
            "6ace64e3e0ef015a",
            "57e12db5a4f749b5",
            "60cf3fe311be3229"
        ],
        "x": 1034,
        "y": 439,
        "w": 292,
        "h": 142
    },
    {
        "id": "0f2354501c884566",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "PID control inputs",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "6bd9768380defc77",
            "9a2c8fb6692ed714",
            "12ca9a0702fbca5a",
            "604dced6aee0aaa5",
            "03029db8d5ffe574"
        ],
        "x": 594,
        "y": 19,
        "w": 652,
        "h": 142
    },
    {
        "id": "f3c16817c44573ee",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Bumpless operation - switching control modes",
        "style": {
            "stroke": "#bfdbef",
            "label": true
        },
        "nodes": [
            "9878ed9344b2728b",
            "7c50d5774b7452da",
            "a3a943bdab548380",
            "3fc97857064cc686",
            "27f28cc029ec441c",
            "313e5264ef13cbeb",
            "fdaf2be07cf14df3",
            "e349501c2d0ab610"
        ],
        "x": 1534,
        "y": 279,
        "w": 592,
        "h": 282
    },
    {
        "id": "fc3a119d66838e66",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Experimental",
        "style": {
            "label": true
        },
        "nodes": [
            "796979b5a4ccbd1d",
            "bba02e75771e345c",
            "eee12d1d0231bcba",
            "a1c971bc04548aca",
            "9bb13d37b483cfa3",
            "f4c384ce6d27d22c",
            "76da5e85f89a1934",
            "7b56a6fbaeb4a104",
            "e7faf24ecfb6bb55",
            "653c01fca5cd14dc",
            "abdc7687a4755e83",
            "98ddded0f226d431",
            "a5230d3ccfa32619"
        ],
        "x": 1034,
        "y": 739,
        "w": 892,
        "h": 242
    },
    {
        "id": "4e27f4f72a2045fb",
        "type": "group",
        "z": "a028c15749bf6cce",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f2baee2d441feb02",
            "43dbca862d586fb8",
            "88a041abb548067e",
            "ec143ffb1132a6ad"
        ],
        "x": 134,
        "y": 199,
        "w": 292,
        "h": 202
    },
    {
        "id": "d09fb063e476ec93",
        "type": "group",
        "z": "a028c15749bf6cce",
        "name": "Load distribution debug option",
        "style": {
            "label": true
        },
        "nodes": [
            "aff516cb7dcbcb94",
            "8f1b1aaaa66112ba",
            "fadb986c7adcf602"
        ],
        "x": 1034,
        "y": 599,
        "w": 452,
        "h": 122
    },
    {
        "id": "b322ccfbcb768127",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Calculate corrections",
        "func": "var logdata = \"\";\n\n// Timing\nlet time_last = context.get('time_last') || Date.now(); // Milliseconds\nlet time_current = Date.now(); // Milliseconds\nlet time_delta = (time_current - time_last) / 1000; // Convert to seconds\n// note: due to inherent 1 sec intervals of P1 meter we omit dt terms. This is mostly for bug checking and optimizations.\n\n// Batteries\nvar batteries = flow.get(\"batteries\"); // array of battery configurations\nvar B_power = flow.get(\"batteries_total_power\"); // charging is positive, discharging negative\nvar anti_windup_threshold = Number(flow.get(\"batteries_total_assignable_power\")) || 0; // max available charge/discharge power.\n\n// Process Variable (PV) currently measured grid power, Setpoint (SP) desired grid power, set 0 for NoM\nvar P1_power = flow.get(\"p1_power\"); // PV: consume is positive, supply to grid is negative\nvar P1_setpoint = flow.get(\"house_target_grid_consumption_in_w\"); // SP: target value\nvar P1_error = flow.get(\"p1_error\");  // W (watt), error signal = SP - PV\nvar P1_derivative = flow.get(\"p1_derivative\"); // Derivative of PV, not the error\n\n// PID values\nvar Kp = flow.get(\"house_battery_control_kp\") || 0.75;  // Proportional gain\nvar Ki = flow.get(\"house_battery_control_ki\") || 0;     // Integral gain        Ki = Kp/Ti\nvar Kd = flow.get(\"house_battery_control_kd\") || 0;     // Derivative gain      Kd = Kp*Td\n\n// helpers\nvar integral_sum = flow.get('I_integral_sum') || 0;\nvar Gm = flow.get(\"master_gain\")||1; // gain scheduling\n\n// optimizations\nvar hysteresis = flow.get(\"house_battery_control_hysteresis_in_w\"); // W (watt)\n\n// -- PID regulator --\n// Proportional term\nlet p_term = Gm * Kp * P1_error;\n\n// Integral term\nintegral_sum += P1_error; \n\n// apply anti-windup \nlet integral_max = anti_windup_threshold / Ki; // improve: anti-windup should only trigger when exceeding the max controlable range\nintegral_sum = Math.min(Math.max(integral_sum, -integral_max), integral_max);\nlet i_term = Ki * integral_sum;\n\n// Differential term\nlet d_term = Gm * Kd * (-P1_derivative); // omitted '/time_delta'. inherent P1 refresh fequency.\n\n// Total PID output\nvar PID_output = p_term + i_term + d_term; // W (watt), the control input for the battery packs\nlogdata += `U(${time_delta}s)[${PID_output}] = P(${Kp})[${p_term}] + I(${Ki})[${i_term}] + D(${Kd})[${d_term}] | `;\n\n// Charging or Discharging states\nvar B_was_charging = context.get(\"batteries_charging_last\") || false;\nvar B_is_charging = PID_output > 0 ? true : false;\n\n// Hysteresis mode: prevents excessive switching between (dis)charge mode around the zero point.\n// if new PID_output lies within hysteresis, it will not switch. 0 = apply no hysteresis\nif (B_is_charging !== B_was_charging && Math.abs(PID_output) < hysteresis){\n    // log explain\n    logdata += `Hysteresis prevented charge mode switch from ${B_was_charging ? \"charging\" : \"discharging\"} to ${B_is_charging ? \"charging\" : \"discharging\"} as ${Math.abs(PID_output)}W <= ${hysteresis}(hyst) | `;\n    // prevent negative charging or positive discharging values (not allowed)\n    PID_output = (PID_output < 0 && B_is_charging) || ((PID_output > 0 && !B_is_charging)) ? 0 : PID_output;\n    // maintain previous scenario\n    B_is_charging = B_was_charging;\n    \n} else {\n    // save for next iteration\n    context.set(\"batteries_charging_last\", B_is_charging); //boolean\n}\n\n// OUTPUT\nflow.set(\"batteries\", batteries);\nflow.set(\"p1_error\", P1_error);\nflow.set(\"batteries_charging\", B_is_charging)\nflow.set(\"I_integral_sum\", integral_sum);\ncontext.set(\"time_last\", Date.now());\n\nreturn [{ payload: Number(PID_output) },\n        { payload: Number(P1_error)},\n        { payload: parseFloat(p_term)},\n        { payload: parseFloat(i_term)},\n        { payload: parseFloat(d_term)},\n        { payload: B_is_charging},\n        { payload: logdata }];",
        "outputs": 7,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "8307c3f29a8f3395"
            ],
            [
                "dcf6337bde2f7fb1"
            ],
            [
                "f95b402db2e6b730"
            ],
            [
                "09e81a2fd79eba06"
            ],
            [
                "50c3634fbe9df0fd"
            ],
            [
                "cc080821ef6c9d6a"
            ],
            [
                "959f7d7d6c9076d5"
            ]
        ],
        "inputLabels": [
            "battery_array"
        ]
    },
    {
        "id": "959f7d7d6c9076d5",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Logdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 880,
        "wires": []
    },
    {
        "id": "dcf6337bde2f7fb1",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Error Signal",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_error_signal"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "3963e3e3d5131913",
                "8e8b6ae6264f1abb"
            ]
        ]
    },
    {
        "id": "dff1cfd51a72a13f",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "PID Output",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "3963e3e3d5131913",
                "ffa7588d2db06862"
            ]
        ]
    },
    {
        "id": "f95b402db2e6b730",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Proportinal term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_p_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 560,
        "y": 640,
        "wires": [
            [
                "3963e3e3d5131913"
            ]
        ]
    },
    {
        "id": "09e81a2fd79eba06",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Integral term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_i_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 550,
        "y": 700,
        "wires": [
            [
                "3963e3e3d5131913"
            ]
        ]
    },
    {
        "id": "50c3634fbe9df0fd",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Differential term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_d_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 560,
        "y": 760,
        "wires": [
            [
                "3963e3e3d5131913"
            ]
        ]
    },
    {
        "id": "3963e3e3d5131913",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "PID analysis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 760,
        "wires": []
    },
    {
        "id": "cc080821ef6c9d6a",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Charging",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 820,
        "wires": []
    },
    {
        "id": "42f6f3270bbf8338",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "716cf792036b7c9c",
        "name": "Batteries",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "1a3cccd99cb08e45",
        "type": "function",
        "z": "a028c15749bf6cce",
        "name": "Batteries",
        "func": "// calculate total power delivered by batteries\nlet total_power = 0;\nmsg.payload.forEach(battery => {\n    total_power += Number(battery.power);\n});\n\n// OUTFLOW\nflow.set(\"batteries\", msg.payload);\nflow.set(\"batteries_total_power\", total_power);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            [
                "957aefd68d9dd137"
            ]
        ],
        "inputLabels": [
            "Mapping (from Home Battery IO)"
        ]
    },
    {
        "id": "cd079e224d668f4d",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "739a25bb96a3bbf8",
        "name": "Advanced settings",
        "func": "flow.set(\"has_soc_charging_limiter\", true); // slows charging from 90% to 100% to improve battery life\nflow.set(\"has_reverse_priority_discharge\", true); // Prioritize discharging and charging the same battery when possible\n\n// Note: batteries get charged in the priority and order provided as input.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 120,
        "wires": [
            [
                "43dbca862d586fb8"
            ]
        ]
    },
    {
        "id": "dface75676a37fa3",
        "type": "comment",
        "z": "a028c15749bf6cce",
        "g": "2fe0ec0f0d11a95d",
        "name": "Bumpless target grid consumption",
        "info": "The error value is used by default to calculate the derivative.\nWhen the target grid consumption (tgc) is changed, the system is takes the derivative of the process variable instead.\nThis prevents irratic behavior during sudden changes of the error or setpoint value.\n\ne.g. you change the setpoint from 0 to 100W \nThe error would make an instantanious jump and cause a huge derivative-term.\nThe pv stays continous and fluent.\n\nAfter 1 control tick the derivative is taken from error again.\nUntil the `tgc` is changed again.",
        "x": 640,
        "y": 240,
        "wires": []
    },
    {
        "id": "a2d6584d1a7ea592",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "2fe0ec0f0d11a95d",
        "name": "Derivative PV",
        "func": "var P1_power = flow.get(\"p1_power\")||0;\nvar P1_last_power = Number(context.get(\"p1_last_power\")) ||0;\n\n// PV derivative\nvar p1_derivative = P1_power - P1_last_power; // devided by unity seconds\n\n// OUTFLOW\nflow.set(\"p1_derivative\", p1_derivative);\ncontext.set(\"p1_last_power\", P1_power);\n\n// OUTPUT\nreturn {payload: p1_derivative};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 300,
        "wires": [
            [
                "c96657d461ae5a1c"
            ]
        ]
    },
    {
        "id": "7bd7386c4c02d9c5",
        "type": "server-state-changed",
        "z": "a028c15749bf6cce",
        "g": "ae7c07fde44d568e",
        "name": "User Ki change",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.house_battery_control_ki"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1640,
        "y": 100,
        "wires": [
            [
                "d0127e9b1672db58"
            ]
        ]
    },
    {
        "id": "d0127e9b1672db58",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "ae7c07fde44d568e",
        "name": "Integral term adjust",
        "func": "// On change of Ki setting\nlet logdata = \"bumpless \";\nlet I_sum = flow.get(\"I_integral_sum\");\nlet Ki = msg.payload || 0;     // Integral gain\nlet Ki_last = context.get(\"house_battery_control_ki_last\")||0;\n\n// if Ki was or has become zero\nif(Ki == 0 || Ki_last == 0){\n    // passify the integral-sum\n    flow.set(\"I_integral_sum\",0);\n    context.set(\"house_battery_control_ki_last\", Ki);\n    logdata += `to/from 0, Ki=${Ki_last} -> ${Ki} | `;\n    // done\n    return { payload: logdata };\n}\n\n// change in Ki\nlet dKi = parseFloat(Ki/Ki_last);\nif(dKi <= 0) dKi = 1; // ignore erroneous changes\n\n// keep I-term constant by compensating the integral-sum for the change in Ki\n// e.g. if Ki got 10% smaller, then integral-sum should increase 10%, to keep the I-term constant\nlet I_sum_new = I_sum / dKi;\nlogdata += `change of I: from ${Ki_last} to ${Ki} (${dKi * 100}%) | `;\n\n// OUTFLOW\nflow.set(\"I_integral_sum\", I_sum_new);\ncontext.set(\"house_battery_control_ki_last\", Ki);\n\n// OUTPUT\nreturn { payload: logdata };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// init last state\nlet Ki = flow.get(\"house_battery_control_ki\") || 0;\ncontext.set(\"house_battery_control_ki_last\", Ki);",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 160,
        "wires": [
            [
                "3a42b3c5e676e0ec"
            ]
        ]
    },
    {
        "id": "56f5776eb1734279",
        "type": "comment",
        "z": "a028c15749bf6cce",
        "g": "ae7c07fde44d568e",
        "name": "Bumpless Ki changes",
        "info": "Recalc I-term whenever Ki changes\n\nNote: always be mindful of making changes to control parameters of systems in operation.",
        "x": 1660,
        "y": 60,
        "wires": []
    },
    {
        "id": "3a42b3c5e676e0ec",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "ae7c07fde44d568e",
        "name": "Logdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 220,
        "wires": []
    },
    {
        "id": "6ace64e3e0ef015a",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "ef2f7152286659c7",
        "name": "Load distribution",
        "func": "//Debug toggle\nlet debugLog = flow.get(\"LoadDistribution_debug_enabled\") === true;\n\n// INPUT\nvar batteries = flow.get(\"batteries\"); // Battery configuration as provided by `Home Batteries IO` flow\nvar isCharging = flow.get(\"batteries_charging\"); // Are we in a battery charging scenario?\nvar hasChargingLimiter = flow.get(\"has_soc_charging_limiter\") || false; // Battery life improvement\nvar hasReverseDischargePriority = flow.get(\"has_reverse_priority_discharge\") || false; // Prioritize (dis)charging the same battery\nvar logdata = `Charging=${isCharging} | `; // logging for node-red debug node\n\n// how much power do the batteries need to compensate?\nvar unassigned_power = Math.abs(msg.payload); // Power in W to compensate using batteries\nlogdata += `Unassigned power ${unassigned_power} W | `;\n\n// inits \nvar solution_array = []; // load distribution solutions\nvar batteries_total_assignable_power = 0; // Current max. available total (dis)charge power. Exceeding this max should trigger the anti-windup routine for the Integral terms\n\n// enums\nconst CMODE = {\n    STOP: \"stop\",\n    CHARGE: \"charge\",\n    DISCHARGE: \"discharge\"\n}\n\n//Debug output function\nfunction debug(message) {\n    if (debugLog) \n        node.warn(message);\n}\n\n// battery life improvement (slow charge near max SoC)\n/**\n* @param {number} soc\n* @param {number} max_power\n*/\nfunction chargingLimiter(soc, max_power) {\n    if(max_power < 0) max_power = 0;\n    if (!hasChargingLimiter) return max_power;\n    if (soc >= 98) return Math.min(250, max_power);\n    if (soc >= 95) return Math.min(500, max_power);\n    if (soc >= 85) return Math.min(1500, max_power);\n    return max_power;\n}\nif(isCharging) logdata += `charge limiting based on SoC is active | `;\n\n// -- BATTERY DISCHARGE PRIORITY\n//if (!isCharging && hasReverseDischargePriority) {\n//    batteries.reverse();\n//}\nlet lastChargingState = flow.get(\"last_isCharging\");\nif (lastChargingState !== isCharging) {\n    flow.set(\"last_isCharging\", isCharging);\n    if (!isCharging && hasReverseDischargePriority) {\n        batteries.reverse();\n        debug(`Battery order reversed once for discharge priority`);\n    }\n}\n\n// -- LOAD BALANCER --\nbatteries.forEach((/** @type {{ id: any; soc: number; soc_min: number; soc_max: number; rs485: string; charging_max: number; discharging_max: any; }} */ battery) => {\n    \n    debug(`[CHECK] Battery ${battery.id}: SoC=${battery.soc}%, Min=${battery.soc_min}%, Max=${battery.soc_max}%, RS485=${battery.rs485}, isCharging=${isCharging}`);\n    \n    // check if battery is available for (dis)charging\n    if ((battery.soc >= battery.soc_max && isCharging) || \n        (battery.soc <= battery.soc_min && !isCharging) || \n        battery.rs485 !== \"enable\") {\n        // battery is NOT available\n        debug(`[SKIP] Battery ${battery.id}: skipped due to SoC/RS485 limit`);\n        let solution = { id: battery.id, mode: CMODE.STOP, power: 0 };\n        solution_array.push(solution);\n        return;\n    }\n\n    // battery is AVAILABLE, assign power\n    let battery_assignable_power = isCharging ? chargingLimiter(battery.soc, battery.charging_max) : battery.discharging_max;\n    let assign = Math.min(unassigned_power, battery_assignable_power);\n    debug(`[ASSIGN] Battery ${battery.id}: allowed to ${isCharging ? \"CHARGE\" : \"DISCHARGE\"} with ${Math.round(assign)}W`);\n    \n    // store assigned power solution\n    let solution = {\n        id: battery.id,\n        mode: (isCharging && assign > 0) ? CMODE.CHARGE : (assign <= 0 ? CMODE.STOP : CMODE.DISCHARGE),\n        power: Math.round(assign)\n    };\n    solution_array.push(solution);\n\n    // remaining power to assign\n    unassigned_power -= assign;\n    batteries_total_assignable_power += Number(battery_assignable_power);\n    //node.warn(`[BATTERY] UPDATE: ID=${battery.id}, new_unassigned=${unassigned_power}W, total_assignable=${batteries_total_assignable_power}W`);\n});\n\n// battery discharge priority - put solutions back in initial order\nif (!isCharging && hasReverseDischargePriority) {\n    solution_array.reverse();\n}\n\n// OUTFLOW\nflow.set(\"batteries_total_assignable_power\", batteries_total_assignable_power);\nlogdata += `batteries_total_assignable_power ${batteries_total_assignable_power} | `;\n\n// OUTPUT\nsolution_array.forEach(solution => { \n    logdata += `Solution: ${solution.id}, ${solution.mode} ${solution.power} W | `;\n});\n\n// TWO OUTPUTS\nreturn [\n    { payload: solution_array }, // to Home Battery IO\n    { payload: logdata, logtitle: \"Battery charge scenario\" }    // debug output\n    ]; ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 480,
        "wires": [
            [
                "60cf3fe311be3229"
            ],
            [
                "57e12db5a4f749b5"
            ]
        ],
        "inputLabels": [
            "isCharging (boolean)"
        ]
    },
    {
        "id": "9c2fa3a765f271da",
        "type": "link in",
        "z": "a028c15749bf6cce",
        "g": "716cf792036b7c9c",
        "name": "Mapping (from Home Battery IO)",
        "links": [
            "31718411354ec91e"
        ],
        "x": 175,
        "y": 120,
        "wires": [
            [
                "42f6f3270bbf8338",
                "1a3cccd99cb08e45"
            ]
        ]
    },
    {
        "id": "290571f30a7ebbe3",
        "type": "comment",
        "z": "a028c15749bf6cce",
        "name": "Start",
        "info": "",
        "x": 70,
        "y": 40,
        "wires": []
    },
    {
        "id": "57e12db5a4f749b5",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "ef2f7152286659c7",
        "name": "Load distribution",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 540,
        "wires": []
    },
    {
        "id": "60cf3fe311be3229",
        "type": "link out",
        "z": "a028c15749bf6cce",
        "g": "ef2f7152286659c7",
        "name": "Load distribution out",
        "mode": "link",
        "links": [
            "85d84b11a51b81b9"
        ],
        "x": 1285,
        "y": 480,
        "wires": []
    },
    {
        "id": "6bd9768380defc77",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "0f2354501c884566",
        "name": "Target grid consumption",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.gewenste_p1_vermogen",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_target_grid_consumption_in_w",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 730,
        "y": 60,
        "wires": [
            [
                "9a2c8fb6692ed714"
            ]
        ],
        "info": "Set at 0 to strive for zero consumption"
    },
    {
        "id": "9a2c8fb6692ed714",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "0f2354501c884566",
        "name": "Hysteresis",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_hysteresis_in_w",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_hysteresis_in_w",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 930,
        "y": 60,
        "wires": [
            [
                "12ca9a0702fbca5a"
            ]
        ]
    },
    {
        "id": "12ca9a0702fbca5a",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "0f2354501c884566",
        "name": "PID P-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_kp",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_kp",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 690,
        "y": 120,
        "wires": [
            [
                "604dced6aee0aaa5"
            ]
        ]
    },
    {
        "id": "604dced6aee0aaa5",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "0f2354501c884566",
        "name": "PID I-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_ki",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_ki",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 930,
        "y": 120,
        "wires": [
            [
                "03029db8d5ffe574"
            ]
        ]
    },
    {
        "id": "03029db8d5ffe574",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "0f2354501c884566",
        "name": "PID D-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_kd",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_kd",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1150,
        "y": 120,
        "wires": [
            [
                "cd079e224d668f4d"
            ]
        ]
    },
    {
        "id": "957aefd68d9dd137",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "716cf792036b7c9c",
        "name": "P1 power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.p1_meter_vermogen_totaal",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "p1_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "6bd9768380defc77"
            ]
        ]
    },
    {
        "id": "9878ed9344b2728b",
        "type": "switch",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Check for custom/auto mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Manual control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Marstek control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Full control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1775,
        "y": 380,
        "wires": [
            [
                "313e5264ef13cbeb",
                "7c50d5774b7452da"
            ],
            [
                "313e5264ef13cbeb",
                "7c50d5774b7452da"
            ],
            [
                "7c50d5774b7452da"
            ]
        ],
        "l": false
    },
    {
        "id": "7c50d5774b7452da",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Master control switch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 520,
        "wires": []
    },
    {
        "id": "a3a943bdab548380",
        "type": "server-state-changed",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Master control mode",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_select.marstek_master_battery_mode"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1650,
        "y": 380,
        "wires": [
            [
                "9878ed9344b2728b"
            ]
        ]
    },
    {
        "id": "3fc97857064cc686",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Integral PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_i_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1970,
        "y": 360,
        "wires": [
            [
                "27f28cc029ec441c"
            ]
        ]
    },
    {
        "id": "27f28cc029ec441c",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Differential PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_d_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1980,
        "y": 400,
        "wires": [
            [
                "fdaf2be07cf14df3"
            ]
        ]
    },
    {
        "id": "313e5264ef13cbeb",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Proportinal PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_p_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1980,
        "y": 320,
        "wires": [
            [
                "3fc97857064cc686"
            ]
        ]
    },
    {
        "id": "fdaf2be07cf14df3",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "PID Output to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1970,
        "y": 440,
        "wires": [
            [
                "e349501c2d0ab610"
            ]
        ]
    },
    {
        "id": "e349501c2d0ab610",
        "type": "change",
        "z": "a028c15749bf6cce",
        "g": "f3c16817c44573ee",
        "name": "Integral sum to zero",
        "rules": [
            {
                "t": "set",
                "p": "I_integral_sum",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1980,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "f2baee2d441feb02",
        "type": "comment",
        "z": "a028c15749bf6cce",
        "g": "4e27f4f72a2045fb",
        "name": "Setpoint ramping / damping",
        "info": "",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "796979b5a4ccbd1d",
        "type": "comment",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Gain scheduling",
        "info": "",
        "x": 1560,
        "y": 780,
        "wires": []
    },
    {
        "id": "ffa7588d2db06862",
        "type": "smooth",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "",
        "property": "payload",
        "action": "sd",
        "count": "8",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 720,
        "y": 520,
        "wires": [
            [
                "21d985fd1e3d44f2"
            ]
        ]
    },
    {
        "id": "21d985fd1e3d44f2",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "PID deviation",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output_deviation"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 890,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8e8b6ae6264f1abb",
        "type": "smooth",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "",
        "property": "payload",
        "action": "sd",
        "count": "8",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 720,
        "y": 580,
        "wires": [
            [
                "a406100a569758f2"
            ]
        ]
    },
    {
        "id": "a406100a569758f2",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Error deviation",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_error_deviation"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 900,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "8307c3f29a8f3395",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "ca60c163b7de7193",
        "name": "Output dampening",
        "func": "// INPUT\nlet PID_unfiltered = msg.payload; // W Watt\nlet PID_last = context.get(\"PID_last\")||0; // W watt\nlet PID_damp = Number(flow.get(\"house_battery_control_pid_output_dampening\"))||0; // 0% - 100%\nPID_damp = PID_damp/100; // to Number\n\n// simple averaging filter\nlet PID_filtered = (1-PID_damp)*PID_unfiltered + (PID_damp)*PID_last;\n\n// OUTFLOW\ncontext.set(\"PID_last\", PID_filtered);\n\n// OUTPUT\nreturn { payload: Number(PID_filtered)};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "dff1cfd51a72a13f",
                "6ace64e3e0ef015a"
            ]
        ]
    },
    {
        "id": "43dbca862d586fb8",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "4e27f4f72a2045fb",
        "name": "Error signal dampening",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_error_signal_dampening",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_error_signal_dampening",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 270,
        "y": 280,
        "wires": [
            [
                "88a041abb548067e"
            ]
        ]
    },
    {
        "id": "88a041abb548067e",
        "type": "api-current-state",
        "z": "a028c15749bf6cce",
        "g": "4e27f4f72a2045fb",
        "name": "Output signal dampening",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_pid_output_dampening",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_pid_output_dampening",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 270,
        "y": 320,
        "wires": [
            [
                "ec143ffb1132a6ad"
            ]
        ]
    },
    {
        "id": "ec143ffb1132a6ad",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "4e27f4f72a2045fb",
        "name": "Error signal + dampening",
        "func": "// INPUTS\nlet P1_error_last = Number(context.get(\"p1_error_last\"))||0; // last error signal level in W\nlet dampening = Number(flow.get(\"house_battery_control_error_signal_dampening\")) || 0; // 0% - 100%\ndampening = dampening / 100; // to Number\n\n// Process Variable (PV) currently measured grid power, Setpoint (SP) desired grid power, set 0 for NoM\nvar P1_power = flow.get(\"p1_power\"); // PV: consume is positive, supply to grid is negative\nvar P1_setpoint = flow.get(\"house_target_grid_consumption_in_w\"); // SP: target value\n\n// Calc error signal\nlet P1_error_unfiltered = P1_setpoint - P1_power;\n\n// Simple averaging filter\nlet P1_error_filtered = (1 - dampening) * P1_error_unfiltered + (dampening) * P1_error_last;\n\n// OUTFLOW\nflow.set(\"p1_error\", P1_error_filtered); // W (watt), error signal = SP - PV\ncontext.set(\"p1_error_last\", P1_error_filtered);\n\n// OUTPUT\nreturn {payload: P1_error_filtered};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "f5e90bceabe1fa6a"
            ]
        ]
    },
    {
        "id": "bba02e75771e345c",
        "type": "smooth",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Std deviation",
        "property": "payload",
        "action": "sd",
        "count": "8",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "e7faf24ecfb6bb55"
            ]
        ]
    },
    {
        "id": "eee12d1d0231bcba",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Derivative (abs)",
        "func": "let value_last = context.get(\"value_last\")||0;\nlet value_now = Number(msg.payload)||0;\nlet derivative = value_now - value_last;\n\n// OUTFLOW\ncontext.set(\"value_last\", value_now);\n\n// OUTPUT\nreturn {payload: derivative};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"value_last\",0);",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 860,
        "wires": [
            [
                "9bb13d37b483cfa3",
                "a1c971bc04548aca"
            ]
        ]
    },
    {
        "id": "a1c971bc04548aca",
        "type": "switch",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Disturbance driver",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "-100",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 860,
        "wires": [
            [
                "abdc7687a4755e83"
            ],
            [
                "76da5e85f89a1934",
                "653c01fca5cd14dc"
            ]
        ]
    },
    {
        "id": "9bb13d37b483cfa3",
        "type": "api-call-service",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Debug",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_debug"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1110,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "f4c384ce6d27d22c",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Rappid loss of stability",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 840,
        "wires": []
    },
    {
        "id": "76da5e85f89a1934",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Regaining control",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 880,
        "wires": []
    },
    {
        "id": "7b56a6fbaeb4a104",
        "type": "comment",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Stability monitoring",
        "info": "",
        "x": 1150,
        "y": 780,
        "wires": []
    },
    {
        "id": "e7faf24ecfb6bb55",
        "type": "switch",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Nominal driver",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1340,
        "y": 820,
        "wires": [
            [
                "653c01fca5cd14dc"
            ],
            [
                "eee12d1d0231bcba"
            ]
        ],
        "info": "When Std deviation is below this value, \r\nswitch to nominal gain configuration"
    },
    {
        "id": "653c01fca5cd14dc",
        "type": "change",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Nominal gain",
        "rules": [
            {
                "t": "set",
                "p": "master_gain",
                "pt": "flow",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1550,
        "y": 820,
        "wires": [
            [
                "98ddded0f226d431",
                "a5230d3ccfa32619"
            ]
        ]
    },
    {
        "id": "abdc7687a4755e83",
        "type": "change",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Disturbed gain",
        "rules": [
            {
                "t": "set",
                "p": "master_gain",
                "pt": "flow",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 860,
        "wires": [
            [
                "f4c384ce6d27d22c",
                "a5230d3ccfa32619"
            ]
        ]
    },
    {
        "id": "98ddded0f226d431",
        "type": "debug",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "Nominal",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 800,
        "wires": []
    },
    {
        "id": "a5230d3ccfa32619",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "fc3a119d66838e66",
        "name": "output processing",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "f5e90bceabe1fa6a",
        "type": "switch",
        "z": "a028c15749bf6cce",
        "g": "2fe0ec0f0d11a95d",
        "name": "Target grid consumption unchanged",
        "property": "house_target_grid_consumption_in_w",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "prev"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "prev"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 280,
        "wires": [
            [
                "07b3c5785a943c50"
            ],
            [
                "a2d6584d1a7ea592"
            ]
        ]
    },
    {
        "id": "07b3c5785a943c50",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "2fe0ec0f0d11a95d",
        "name": "Derivative Error",
        "func": "var P1_error = flow.get(\"p1_error\")||0;\nvar P1_last_error = Number(context.get(\"p1_last_error\")) ||0;\n\n// Error derivative\n// note: error = -PV\nvar p1_derivative = -(P1_error - P1_last_error); // devided by unity seconds\n\n// OUTFLOW\nflow.set(\"p1_derivative\", p1_derivative);\ncontext.set(\"p1_last_error\", P1_error);\n\n// OUTPUT\nreturn {payload: p1_derivative};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "c96657d461ae5a1c"
            ]
        ]
    },
    {
        "id": "c96657d461ae5a1c",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "2fe0ec0f0d11a95d",
        "name": "Derivative final value",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "b322ccfbcb768127"
            ]
        ]
    },
    {
        "id": "aff516cb7dcbcb94",
        "type": "inject",
        "z": "a028c15749bf6cce",
        "g": "d09fb063e476ec93",
        "name": "Debug FALSE",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "8f1b1aaaa66112ba"
            ]
        ]
    },
    {
        "id": "8f1b1aaaa66112ba",
        "type": "function",
        "z": "a028c15749bf6cce",
        "g": "d09fb063e476ec93",
        "name": "Set debug true/false",
        "func": "flow.set(\"LoadDistribution_debug_enabled\", msg.payload);\nnode.warn(\"Debug flag set to: \" + msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "fadb986c7adcf602",
        "type": "inject",
        "z": "a028c15749bf6cce",
        "g": "d09fb063e476ec93",
        "name": "Debug TRUE",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "8f1b1aaaa66112ba"
            ]
        ]
    },
    {
        "id": "176d29a.6f648d6",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": true,
        "heartbeatInterval": 30,
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": false
    }
]