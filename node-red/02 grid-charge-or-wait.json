[
    {
        "id": "ad59aaf659b31a8d",
        "type": "tab",
        "label": "Strategy grid-charge-or-wait",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5a505063458cc373",
        "type": "group",
        "z": "ad59aaf659b31a8d",
        "name": "Configuration",
        "style": {
            "label": true
        },
        "nodes": [
            "ee81415a7a3d87e6",
            "e5e29455bd6afbaa"
        ],
        "x": 24,
        "y": 79,
        "w": 192,
        "h": 142
    },
    {
        "id": "a43400bd874ba358",
        "type": "group",
        "z": "ad59aaf659b31a8d",
        "name": "Battery solutions",
        "style": {
            "label": true
        },
        "nodes": [
            "87d548bd5aed4381",
            "8feec1efcb2a7b66"
        ],
        "x": 864,
        "y": 379,
        "w": 192,
        "h": 142
    },
    {
        "id": "7e7a68d5afb27d01",
        "type": "group",
        "z": "ad59aaf659b31a8d",
        "name": "Configuration",
        "style": {
            "label": true
        },
        "nodes": [
            "7266d15692f87378",
            "7268dcab2999bcaa"
        ],
        "x": 34,
        "y": 319,
        "w": 232,
        "h": 149.5
    },
    {
        "id": "791b11003865e232",
        "type": "comment",
        "z": "ad59aaf659b31a8d",
        "name": "Home Battery Strategy",
        "info": "The `Home Battery Start` flow will call this strategy flow\nby matching the strategy name with the Link In name.\n\nConfigure the Link In node in the Start group.\n\nDon't modify other parts of the Start and End groups.\nThey handle the calling and returning for you.",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "ee81415a7a3d87e6",
        "type": "link in",
        "z": "ad59aaf659b31a8d",
        "g": "5a505063458cc373",
        "name": "Grid-Charge-Or-Wait",
        "links": [],
        "x": 175,
        "y": 180,
        "wires": [
            [
                "98f251d06b810e88"
            ]
        ]
    },
    {
        "id": "e5e29455bd6afbaa",
        "type": "comment",
        "z": "ad59aaf659b31a8d",
        "g": "5a505063458cc373",
        "name": "Start (readme)",
        "info": "# Setting up your battery strategy flow\n\n## Setup\nName the `Link In node` in this start group exactly after the <select> option configured in your\nselect_input.house_battery_strategy\n\nconfigure select options in:\ninput_select_house_battery_control.yaml\n\n### example\n`house_battery_strategy:\n  name: House Battery Strategy\n  options:\n    - AcmE example`\n\nThe above creates a select option, allowing user to select 'AcmE example'\n\nWhen selected, battery control will search for a flow containing a Link In node\ncalled 'AcmE example' (case sensitive).",
        "x": 120,
        "y": 120,
        "wires": []
    },
    {
        "id": "87d548bd5aed4381",
        "type": "link out",
        "z": "ad59aaf659b31a8d",
        "g": "a43400bd874ba358",
        "name": "Return",
        "mode": "return",
        "links": [],
        "x": 905,
        "y": 480,
        "wires": []
    },
    {
        "id": "8feec1efcb2a7b66",
        "type": "comment",
        "z": "ad59aaf659b31a8d",
        "g": "a43400bd874ba358",
        "name": "End (readme)",
        "info": "Should return a solution_array of battery objects\n\n## battery object format\n`{{id: string|number, mode: string, power: number}} battery solution`\n- id is an arbitrary battery ID\n- mode is \"stop\", \"charge\", \"discharge\" for Marstek\n- power in Watts\n\n### example array\nreturn this type of solution_array via msg.solutions\n` \nlet solution_array = [];\nsolution_array.push({id:\"M1\", mode: \"charge\", power: 100}); // per battery\nreturn {solutions: solution_array};\n` ",
        "x": 960,
        "y": 420,
        "wires": []
    },
    {
        "id": "98f251d06b810e88",
        "type": "api-current-state",
        "z": "ad59aaf659b31a8d",
        "name": "strategy_accu_grid_charge_or_wait_total_target_capacity",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.strategy_accu_grid_charge_or_wait_total_target_capacity",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "strategy_accu_grid_charge_or_wait_total_target_capacity",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 470,
        "y": 100,
        "wires": [
            [
                "4c2d62ccea090264"
            ]
        ]
    },
    {
        "id": "4c2d62ccea090264",
        "type": "api-current-state",
        "z": "ad59aaf659b31a8d",
        "name": "strategy_accu_grid_charge_or_wait_start_at",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_datetime.strategy_accu_grid_charge_or_wait_start_at",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "strategy_accu_grid_charge_or_wait_start_at",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "d5f452e0ffe77138"
            ]
        ]
    },
    {
        "id": "d5f452e0ffe77138",
        "type": "api-current-state",
        "z": "ad59aaf659b31a8d",
        "name": "strategy_accu_grid_charge_or_wait_stop_at",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_datetime.strategy_accu_grid_charge_or_wait_stop_at",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "strategy_accu_grid_charge_or_wait_stop_at",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "9f0cbb0f7fdbf1d5"
            ]
        ]
    },
    {
        "id": "9f0cbb0f7fdbf1d5",
        "type": "api-current-state",
        "z": "ad59aaf659b31a8d",
        "name": "strategy_accu_grid_charge_or_wait_switch_to_strategy_when_finished",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.strategy_accu_grid_charge_or_wait_switch_to_strategy_when_finished",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "strategy_accu_grid_charge_or_wait_switch_to_strategy_when_finished",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "dafc0ef9b9efc8cb"
            ]
        ]
    },
    {
        "id": "f0d0cb9b4959bc41",
        "type": "function",
        "z": "ad59aaf659b31a8d",
        "name": "Sum current  battery capacity",
        "func": "let total_current_capacity = 0\n\nmsg.batteries.forEach(battery => {\n    total_current_capacity += battery.remaining_capacity\n});\n\nmsg.payload = total_current_capacity;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 540,
        "wires": [
            [
                "6e725d636fd14dbf"
            ]
        ],
        "inputLabels": [
            "Mapping (from Home Battery IO)"
        ]
    },
    {
        "id": "6e725d636fd14dbf",
        "type": "switch",
        "z": "ad59aaf659b31a8d",
        "name": "Check target capacity ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "strategy_accu_grid_charge_or_wait_total_target_capacity",
                "vt": "flow"
            },
            {
                "t": "lt",
                "v": "strategy_accu_grid_charge_or_wait_total_target_capacity",
                "vt": "flow"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 540,
        "wires": [
            [
                "c2b74ee3bc97b96f"
            ],
            [
                "5579145d5845a9a2"
            ]
        ]
    },
    {
        "id": "5579145d5845a9a2",
        "type": "function",
        "z": "ad59aaf659b31a8d",
        "name": "Build battery charge array",
        "func": "\nlet batteries = msg.batteries;\nlet solution_array = [];\nvar hasChargingLimiter = flow.get(\"has_soc_charging_limiter\") || false; // Battery life improvement\n\nfunction chargingLimiter(soc, max_power, hasChargingLimiter) {\n    if (!hasChargingLimiter) return max_power;\n    if (soc == 100) return Math.min(0, max_power);\n    if (soc >= 98) return Math.min(300, max_power);\n    if (soc >= 95) return Math.min(500, max_power);\n    if (soc >= 85) return Math.min(1500, max_power);\n    return max_power;\n}\n\nmsg.batteries.forEach(battery => {\n    solution_array.push({\n        id: battery.id,\n        mode: \"charge\",\n        power: chargingLimiter(battery.soc, battery.charging_max, true)\n    });\n});\n\nmsg.solutions = solution_array;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 560,
        "wires": [
            [
                "dd6bbe7241cefe5f",
                "87d548bd5aed4381"
            ]
        ],
        "inputLabels": [
            "Mapping (from Home Battery IO)"
        ]
    },
    {
        "id": "dd6bbe7241cefe5f",
        "type": "debug",
        "z": "ad59aaf659b31a8d",
        "name": "Output solution array",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 560,
        "wires": []
    },
    {
        "id": "c2b74ee3bc97b96f",
        "type": "api-call-service",
        "z": "ad59aaf659b31a8d",
        "name": "Set strategy when done",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_select.select_option",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_select.house_battery_strategy"
        ],
        "labelId": [],
        "data": "{\"option\":\"{{flow.strategy_accu_grid_charge_or_wait_switch_to_strategy_when_finished}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_select",
        "service": "select_option",
        "x": 670,
        "y": 520,
        "wires": [
            [
                "87d548bd5aed4381"
            ]
        ]
    },
    {
        "id": "dafc0ef9b9efc8cb",
        "type": "api-current-state",
        "z": "ad59aaf659b31a8d",
        "name": "strategy_accu_grid_charge_or_wait_charge_enabled",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.strategy_accu_grid_charge_or_wait_charge_enabled",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "strategy_accu_grid_charge_or_wait_charge_enabled",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "7266d15692f87378"
            ]
        ]
    },
    {
        "id": "512cb5d167268473",
        "type": "switch",
        "z": "ad59aaf659b31a8d",
        "name": "Carge enabled?",
        "property": "strategy_accu_grid_charge_or_wait_charge_enabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "87d548bd5aed4381"
            ],
            [
                "f0d0cb9b4959bc41"
            ]
        ]
    },
    {
        "id": "1d7bf833dbd1b1fc",
        "type": "debug",
        "z": "ad59aaf659b31a8d",
        "name": "Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 400,
        "wires": []
    },
    {
        "id": "7268dcab2999bcaa",
        "type": "comment",
        "z": "ad59aaf659b31a8d",
        "g": "7e7a68d5afb27d01",
        "name": "(readme)",
        "info": "This function evaluates whether the current \ntime falls before, inside, or after a \nconfigured time window (supports same-day and \novernight windows).\n\nOutputs\n\t1.\tPlanned – \n      Current time is before the start of the \n      window (the window is scheduled but not \n      active yet). So end the flow and do noting. \n\t2.\tInside – \n      Current time is within the window \n      (strategy should be active). So check for \n      charging is enabled. \n\t3.\tAfter – \n      Current time is past the window (the \n      window has finished).\n      So, intension of the flow is finished and \n      switch to new strategy\n\n",
        "x": 120,
        "y": 360,
        "wires": []
    },
    {
        "id": "7266d15692f87378",
        "type": "function",
        "z": "ad59aaf659b31a8d",
        "g": "7e7a68d5afb27d01",
        "name": "Check time window",
        "func": "// Verwacht tijden als \"HH:MM\" of \"HH:MM:SS\" in flow context\nconst startRaw = flow.get('strategy_accu_grid_charge_or_wait_start_at');\nconst stopRaw = flow.get('strategy_accu_grid_charge_or_wait_stop_at');\n\nif (!startRaw || !stopRaw) {\n  node.status({ fill: \"yellow\", shape: \"ring\", text: \"start/stop niet gezet\" });\n  return [null, null, null];\n}\n\nfunction parseHM(raw) {\n  const [h, m, s] = raw.trim().split(':').map(Number);\n  if (Number.isInteger(h) && Number.isInteger(m)) return { h, m, s: s || 0 };\n  throw new Error(\"Onbekend tijdformaat: \" + raw);\n}\nfunction todSeconds(d) { return d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds(); }\n\nconst now = new Date(); // lokale tijd\nconst { h: sh, m: sm, s: ss } = parseHM(startRaw);\nconst { h: eh, m: em, s: es } = parseHM(stopRaw);\n\nconst nowTOD = todSeconds(now);\nconst startTOD = sh * 3600 + sm * 60 + ss;\nconst stopTOD = eh * 3600 + em * 60 + es;\n\nlet start, stop, state;\n\n// CASE A: zelfde-dag venster (bv. 14:00 → 18:00)\nif (stopTOD > startTOD) {\n  start = new Date(now.getFullYear(), now.getMonth(), now.getDate(), sh, sm, ss, 0);\n  stop = new Date(now.getFullYear(), now.getMonth(), now.getDate(), eh, em, es, 0);\n\n  if (nowTOD < startTOD) state = \"planned\"; // nog niet begonnen\n  else if (nowTOD < stopTOD) state = \"inside\";  // actief\n  else state = \"after\";   // voorbij\n\n  // CASE B: overnight venster (bv. 22:00 → 09:00)\n} else {\n  const eveningStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), sh, sm, ss, 0);\n  const morningStop = new Date(now.getFullYear(), now.getMonth(), now.getDate(), eh, em, es, 0);\n\n  if (nowTOD >= startTOD) {\n    // Avonddeel\n    start = eveningStart;\n    stop = new Date(morningStop); stop.setDate(stop.getDate() + 1);\n    state = \"inside\";\n  } else if (nowTOD < stopTOD) {\n    // Ochtenddeel\n    start = new Date(eveningStart); start.setDate(start.getDate() - 1);\n    stop = morningStop;\n    state = \"inside\";\n  } else {\n    // Overdag tussen stop en start\n    start = eveningStart;\n    stop = new Date(morningStop); stop.setDate(stop.getDate() + 1);\n    state = \"planned\";\n  }\n}\n\n// Vul message\nmsg.state = state; // \"planned\" | \"inside\" | \"after\"\nmsg.window = {\n  now: now.toISOString(),\n  start: start.toISOString(),\n  stop: stop.toISOString(),\n  start_raw: startRaw,\n  stop_raw: stopRaw\n};\nmsg.payload = { state, window: msg.window };\n\n// Node status kleuren\nif (state === \"planned\") {\n  node.status({ fill: \"blue\", shape: \"dot\", text: `PLANNED ${startRaw}→${stopRaw}` });\n  return [msg, null, null];\n}\nif (state === \"inside\") {\n  node.status({ fill: \"green\", shape: \"dot\", text: `INSIDE ${startRaw}→${stopRaw}` });\n  return [null, msg, null];\n}\n// Anders = after\nnode.status({ fill: \"grey\", shape: \"dot\", text: `AFTER ${startRaw}→${stopRaw}` });\nreturn [null, null, msg];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 420,
        "wires": [
            [
                "87d548bd5aed4381",
                "1d7bf833dbd1b1fc"
            ],
            [
                "512cb5d167268473",
                "1d7bf833dbd1b1fc"
            ],
            [
                "c2b74ee3bc97b96f",
                "1d7bf833dbd1b1fc"
            ]
        ]
    },
    {
        "id": "176d29a.6f648d6",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    }
]