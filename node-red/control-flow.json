[
    {
        "id": "12a97c65ca14f3e2",
        "type": "tab",
        "label": "Home Battery Control",
        "disabled": false,
        "info": "# Home battery control\r\nConsists of three flows:\r\n 1.  Input flow\r\n 1.  Control flow\r\n 1.  Master switch flow\r\n\r\n## Control flow\r\nThis is the `Control flow`.\r\n\r\nIt start with the battery_array which is retreived from the `Input flow`.\r\nIf the `Master Switch` is set to `full control`, the `Control flow` is used.\r\nIt determines the charge/discharge based on your PID settings.\r\nIt then sets your batteries to the desired values.",
        "env": []
    },
    {
        "id": "708abd55c0ed5536",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "PID controller",
        "style": {
            "label": true
        },
        "nodes": [
            "4c9a7bf109ed3b83",
            "8988910187d6d28f",
            "c4258f28e4d4cc85",
            "312f728b2b5cae20",
            "ce9b099aa8a67ee6",
            "b41cb1748eba5037",
            "0fe026ddcef8a4b9",
            "48174a22ab6075bc",
            "3fa5c5f135d538eb",
            "d6a40360d0255053",
            "25841bbae4c94335"
        ],
        "x": 134,
        "y": 441.5,
        "w": 852,
        "h": 479.5
    },
    {
        "id": "94a41a1b6072d1d0",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "Input",
        "style": {
            "label": true
        },
        "nodes": [
            "65f41bc0b91d624d",
            "caf766d444794032",
            "d09392efbcdf82d8"
        ],
        "x": 144,
        "y": 19,
        "w": 382,
        "h": 142
    },
    {
        "id": "514677c39ec3576b",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "Advanced features",
        "style": {
            "label": true
        },
        "nodes": [
            "20c48c85c10451ef"
        ],
        "x": 1234,
        "y": 79,
        "w": 232,
        "h": 82
    },
    {
        "id": "da197078febec251",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "Bumpless operation",
        "style": {
            "label": true
        },
        "nodes": [
            "c4d930ac5428f39f",
            "27d5a3f876af3355",
            "72237d7adf9ce6ea"
        ],
        "x": 1494,
        "y": 19,
        "w": 412,
        "h": 142
    },
    {
        "id": "753403731f001682",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "Bumpless operation",
        "style": {
            "label": true,
            "stroke": "#bfdbef"
        },
        "nodes": [
            "2570fc471fcdacea",
            "1ed2c560e91502e8",
            "c5925de58155b834",
            "08efd65af15275f6"
        ],
        "x": 1494,
        "y": 179,
        "w": 252,
        "h": 242
    },
    {
        "id": "3ded72deba4915d8",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "Power distribution over batteries",
        "style": {
            "label": true
        },
        "nodes": [
            "88f8151a5e7a23df",
            "7929b327617af307",
            "a97aef91d36d4397"
        ],
        "x": 1014,
        "y": 439,
        "w": 322,
        "h": 142
    },
    {
        "id": "5f4c95f6f7db12fe",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "PID control inputs",
        "style": {
            "label": true,
            "label-position": "ne"
        },
        "nodes": [
            "40ed95c84ed14613",
            "32e4715493d0b4ed",
            "5da4b44a1b708b78",
            "6770bc975dc98f06",
            "6ffe70e7e4494066"
        ],
        "x": 554,
        "y": 19,
        "w": 652,
        "h": 142
    },
    {
        "id": "25a20e8266043ec1",
        "type": "group",
        "z": "12a97c65ca14f3e2",
        "name": "Bumpless operation - switching control modes",
        "style": {
            "stroke": "#bfdbef",
            "label": true
        },
        "nodes": [
            "5b8c898d1f8286a7",
            "08ba59de316b597d",
            "a4bc46361c958b98",
            "b3dafbd8ffdd60ea",
            "9f31979433acbf1f",
            "bef95604dc628eb8",
            "c6fda1fe3fd93ea9",
            "c755036a0c7da285"
        ],
        "x": 1494,
        "y": 439,
        "w": 592,
        "h": 282
    },
    {
        "id": "4c9a7bf109ed3b83",
        "type": "function",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Calculate corrections",
        "func": "var logdata = \"\";\n\n// Timing\nlet time_last = context.get('time_last') || Date.now(); // Milliseconds\nlet time_current = Date.now(); // Milliseconds\nlet time_delta = (time_current - time_last) / 1000; // Convert to seconds\n// note: due to inherent 1 sec intervals of P1 meter we omit dt terms. This is mostly for bug checking and optimizations.\n\n// Batteries\nvar batteries = flow.get(\"batteries\"); // array of battery configurations\nvar B_power = flow.get(\"batteries_total_power\"); // charging is positive, discharging negative\nvar anti_windup_threshold = Number(flow.get(\"batteries_total_assignable_power\")) || 0; // max available charge/discharge power.\n\n// Process Variable (PV) currently measured grid power, Setpoint (SP) desired grid power, set 0 for NoM\nvar P1_power = flow.get(\"p1_power\"); // PV: consume is positive, supply to grid is negative\nvar P1_setpoint = flow.get(\"house_target_grid_consumption_in_w\"); // SP: target value\nvar P1_error = P1_setpoint - P1_power;  // W (watt), error signal = SP - PV\nvar P1_derivative = flow.get(\"p1_derivative\"); // Derivative of PV, not the error\n\n// PID values\nvar Kp = flow.get(\"house_battery_control_kp\") || 0.75;  // Proportional gain\nvar Ki = flow.get(\"house_battery_control_ki\") || 0;     // Integral gain        Ki = Kp/Ti\nvar Kd = flow.get(\"house_battery_control_kd\") || 0;     // Derivative gain      Kd = Kp*Td\n\n// helpers\nvar integral_sum = flow.get('I_integral_sum') || 0;\nvar P1_last_error = context.get('P1_last_error') || 0;\n\n// optimizations\nvar hysteresis = flow.get(\"house_battery_control_hysteresis_in_w\"); // W (watt)\n\n// -- PID regulator --\n// Proportional term\nlet p_term = Kp * P1_error;\n\n// Integral term\nintegral_sum += P1_error; \n\n// apply anti-windup \nlet integral_max = anti_windup_threshold / Ki; // improve: anti-windup should only trigger when exceeding the max controlable range\nintegral_sum = Math.min(Math.max(integral_sum, -integral_max), integral_max);\nlet i_term = Ki * integral_sum;\n\n// Differential term\nlet d_term = Kd * (-P1_derivative); // omitted '/time_delta'. inherent P1 refresh fequency.\n\n// Total PID output\nvar PID_output = p_term + i_term + d_term; // W (watt), the control input for the battery packs\nlogdata += `U(${time_delta}s)[${PID_output}] = P(${Kp})[${p_term}] + I(${Ki})[${i_term}] + D(${Kd})[${d_term}] | `;\n\n// Charging or Discharging states\nvar B_was_charging = context.get(\"batteries_charging_last\") || false;\nvar B_is_charging = PID_output > 0 ? true : false;\n\n// Hysteresis mode: prevents excessive switching between (dis)charge mode around the zero point.\n// if new PID_output lies within hysteresis, it will not switch. 0 = apply no hysteresis\nif (B_is_charging !== B_was_charging && Math.abs(PID_output) < hysteresis){\n    // log explain\n    logdata += `Hysteresis prevented charge mode switch from ${B_was_charging ? \"charging\" : \"discharging\"} to ${B_is_charging ? \"charging\" : \"discharging\"} as ${Math.abs(PID_output)}W <= ${hysteresis}(hyst) | `;\n    // prevent negative charging or positive discharging values (not allowed)\n    PID_output = (PID_output < 0 && B_is_charging) || ((PID_output > 0 && !B_is_charging)) ? 0 : PID_output;\n    // maintain previous scenario\n    B_is_charging = B_was_charging;\n    \n} else {\n    // save for next iteration\n    context.set(\"batteries_charging_last\", B_is_charging); //boolean\n}\n\n// OUTPUT\nflow.set(\"batteries\", batteries);\nflow.set(\"p1_error\", P1_error);\nflow.set(\"batteries_charging\", B_is_charging)\nflow.set(\"I_integral_sum\", integral_sum);\ncontext.set(\"time_last\", Date.now());\ncontext.set(\"P1_last_error\", P1_error);\n\nreturn [{ payload: Number(PID_output) },\n        { payload: Number(P1_error)},\n        { payload: parseFloat(p_term)},\n        { payload: parseFloat(i_term)},\n        { payload: parseFloat(d_term)},\n        { payload: B_is_charging},\n        { payload: logdata }];",
        "outputs": 7,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "ce9b099aa8a67ee6",
                "88f8151a5e7a23df"
            ],
            [
                "c4258f28e4d4cc85"
            ],
            [
                "0fe026ddcef8a4b9"
            ],
            [
                "48174a22ab6075bc"
            ],
            [
                "3fa5c5f135d538eb"
            ],
            [
                "25841bbae4c94335"
            ],
            [
                "8988910187d6d28f"
            ]
        ],
        "inputLabels": [
            "battery_array"
        ]
    },
    {
        "id": "8988910187d6d28f",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Logdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 880,
        "wires": []
    },
    {
        "id": "c4258f28e4d4cc85",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Error Signal",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_error_signal"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "312f728b2b5cae20",
                "d6a40360d0255053"
            ]
        ]
    },
    {
        "id": "312f728b2b5cae20",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "(e) error signal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 580,
        "wires": []
    },
    {
        "id": "ce9b099aa8a67ee6",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "PID Output",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "b41cb1748eba5037",
                "d6a40360d0255053"
            ]
        ]
    },
    {
        "id": "b41cb1748eba5037",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "MV manipulated value",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 520,
        "wires": []
    },
    {
        "id": "0fe026ddcef8a4b9",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Proportinal term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_p_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 560,
        "y": 640,
        "wires": [
            [
                "d6a40360d0255053"
            ]
        ]
    },
    {
        "id": "48174a22ab6075bc",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Integral term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_i_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 550,
        "y": 700,
        "wires": [
            [
                "d6a40360d0255053"
            ]
        ]
    },
    {
        "id": "3fa5c5f135d538eb",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Differential term",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_d_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"{{payload}}\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 560,
        "y": 760,
        "wires": [
            [
                "d6a40360d0255053"
            ]
        ]
    },
    {
        "id": "d6a40360d0255053",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "PID analysis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 640,
        "wires": []
    },
    {
        "id": "25841bbae4c94335",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "708abd55c0ed5536",
        "name": "Charging",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 820,
        "wires": []
    },
    {
        "id": "65f41bc0b91d624d",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "94a41a1b6072d1d0",
        "name": "Batteries",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "587812601490717b",
        "type": "function",
        "z": "12a97c65ca14f3e2",
        "name": "Batteries",
        "func": "// calculate total power delivered by batteries\nlet total_power = 0;\nmsg.payload.forEach(battery => {\n    total_power += Number(battery.power);\n});\n\n// OUTFLOW\nflow.set(\"batteries\", msg.payload);\nflow.set(\"batteries_total_power\", total_power);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            [
                "d09392efbcdf82d8"
            ]
        ],
        "inputLabels": [
            "Mapping (from Home Battery IO)"
        ]
    },
    {
        "id": "20c48c85c10451ef",
        "type": "function",
        "z": "12a97c65ca14f3e2",
        "g": "514677c39ec3576b",
        "name": "Advanced settings",
        "func": "flow.set(\"has_soc_charging_limiter\", true); // slows charging from 90% to 100% to improve battery life\nflow.set(\"has_reverse_priority_discharge\", true); // Prioritize discharging and charging the same battery when possible\n\n// Note: batteries get charged in the priority and order provided as input.\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 120,
        "wires": [
            [
                "27d5a3f876af3355"
            ]
        ]
    },
    {
        "id": "c4d930ac5428f39f",
        "type": "comment",
        "z": "12a97c65ca14f3e2",
        "g": "da197078febec251",
        "name": "Bumpless target grid consumption",
        "info": "Instead of the error value, we use the process variable.\nThis prevents irratic behavior during sudden changes of the error or setpoint value.\n\ne.g. you change the setpoint from 0 to 100W \nThe error would make an instantanious jump and cause a huge derivative-term.\nThe pv stays continous and fluent.",
        "x": 1660,
        "y": 60,
        "wires": []
    },
    {
        "id": "27d5a3f876af3355",
        "type": "function",
        "z": "12a97c65ca14f3e2",
        "g": "da197078febec251",
        "name": "Derivative PV",
        "func": "var P1_power = flow.get(\"p1_power\")||0;\nvar P1_last_power = Number(context.get(\"p1_last_power\")) ||0;\n\n// PV derivative\nvar p1_derivative = P1_power - P1_last_power; // devided by unity seconds\n\n// OUTFLOW\nflow.set(\"p1_derivative\", p1_derivative);\ncontext.set(\"p1_last_power\", P1_power);\n\n// OUTPUT\nreturn {payload: p1_derivative};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 120,
        "wires": [
            [
                "4c9a7bf109ed3b83",
                "72237d7adf9ce6ea"
            ]
        ]
    },
    {
        "id": "72237d7adf9ce6ea",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "da197078febec251",
        "name": "PV derive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 120,
        "wires": []
    },
    {
        "id": "2570fc471fcdacea",
        "type": "server-state-changed",
        "z": "12a97c65ca14f3e2",
        "g": "753403731f001682",
        "name": "User Ki change",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_number.house_battery_control_ki"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1600,
        "y": 260,
        "wires": [
            [
                "1ed2c560e91502e8"
            ]
        ]
    },
    {
        "id": "1ed2c560e91502e8",
        "type": "function",
        "z": "12a97c65ca14f3e2",
        "g": "753403731f001682",
        "name": "Integral term adjust",
        "func": "// On change of Ki setting\nlet logdata = \"bumpless \";\nlet I_sum = flow.get(\"I_integral_sum\");\nlet Ki = msg.payload || 0;     // Integral gain\nlet Ki_last = context.get(\"house_battery_control_ki_last\")||0;\n\n// if Ki was or has become zero\nif(Ki == 0 || Ki_last == 0){\n    // passify the integral-sum\n    flow.set(\"I_integral_sum\",0);\n    context.set(\"house_battery_control_ki_last\", Ki);\n    logdata += `to/from 0, Ki=${Ki_last} -> ${Ki} | `;\n    // done\n    return { payload: logdata };\n}\n\n// change in Ki\nlet dKi = parseFloat(Ki/Ki_last);\nif(dKi <= 0) dKi = 1; // ignore erroneous changes\n\n// keep I-term constant by compensating the integral-sum for the change in Ki\n// e.g. if Ki got 10% smaller, then integral-sum should increase 10%, to keep the I-term constant\nlet I_sum_new = I_sum / dKi;\nlogdata += `change of I: from ${Ki_last} to ${Ki} (${dKi * 100}%) | `;\n\n// OUTFLOW\nflow.set(\"I_integral_sum\", I_sum_new);\ncontext.set(\"house_battery_control_ki_last\", Ki);\n\n// OUTPUT\nreturn { payload: logdata };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// init last state\nlet Ki = flow.get(\"house_battery_control_ki\") || 0;\ncontext.set(\"house_battery_control_ki_last\", Ki);",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 320,
        "wires": [
            [
                "08efd65af15275f6"
            ]
        ]
    },
    {
        "id": "c5925de58155b834",
        "type": "comment",
        "z": "12a97c65ca14f3e2",
        "g": "753403731f001682",
        "name": "Bumpless Ki changes",
        "info": "Recalc I-term whenever Ki changes\n\nNote: always be mindful of making changes to control parameters of systems in operation.",
        "x": 1620,
        "y": 220,
        "wires": []
    },
    {
        "id": "08efd65af15275f6",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "753403731f001682",
        "name": "Logdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 380,
        "wires": []
    },
    {
        "id": "88f8151a5e7a23df",
        "type": "function",
        "z": "12a97c65ca14f3e2",
        "g": "3ded72deba4915d8",
        "name": "Load distribution",
        "func": "// INPUT\nvar batteries = flow.get(\"batteries\");\nvar isCharging = flow.get(\"batteries_charging\"); // Are we in a battery charging scenario?\nvar hasChargingLimiter = flow.get(\"has_soc_charging_limiter\") || false; // Battery life improvement\nvar hasReverseDischargePriority = flow.get(\"has_reverse_priority_discharge\") || false; // Prioritize (dis)charging the same battery\nvar logdata = `Charging=${isCharging} | `; // logging\n// how much power do the batteries need to compensate?\nvar unassigned_power = Math.abs(msg.payload); // Power in W to compensate using batteries\nlogdata += `Unassigned power ${unassigned_power} W | `;\n\n// inits \nvar solution_array = []; // load distribution solutions\nvar batteries_total_assignable_power = 0; // Current max. available total (dis)charge power. Exceeding this max should trigger the anti-windup routine for the Integral terms\n\n// enums\nconst CMODE = {\n    STOP: \"stop\",\n    CHARGE: \"charge\",\n    DISCHARGE: \"discharge\"\n}\n\n// battery life improvement (slow charge near max SoC)\n/**\n* @param {number} soc\n* @param {number} max_power\n*/\nfunction chargingLimiter(soc, max_power) {\n    if(max_power < 0) max_power = 0;\n    if (!hasChargingLimiter) return max_power;\n    if (soc >= 98) return Math.min(200, max_power);\n    if (soc >= 95) return Math.min(500, max_power);\n    if (soc >= 90) return Math.min(1500, max_power);\n    return max_power;\n}\nif(isCharging) logdata += `charge limiting based on SoC is active | `;\n\n// -- BATTERY DISCHARGE PRIORITY\nif (!isCharging && hasReverseDischargePriority) {\n    batteries.reverse();\n}\n\n// -- LOAD BALANCER --\nbatteries.forEach((/** @type {{ soc: number; soc_max: number; soc_min: number; rs485: string; id: any; charging_max: any; discharging_max: any; }} */ battery) =>{\n\n    // Step 1. remove unfit batteries\n    if(\n        (battery.soc >= battery.soc_max && isCharging) || \n        (battery.soc <= battery.soc_min && !isCharging) || \n        battery.rs485 !== \"enable\") {\n            // configure a STOP solution\n            let solution = {\n                id: battery.id,\n                mode: CMODE.STOP,\n                power: 0\n            };\n            // push solution\n            solution_array.push(solution);\n            // log we are stopping forced control for this battery \n            logdata += `${battery.id}: [skipped] SoC limits=${battery.soc_max}>[${battery.soc}]>${battery.soc_min}%, rs485=${battery.rs485} | `;\n            // skip further processing of this battery\n            return;\n        }\n\n    // Step 2. assign available (dis)charging power\n    let battery_assignable_power = isCharging ? chargingLimiter(battery.soc, battery.charging_max) : battery.discharging_max;\n    let assign = Math.min(unassigned_power, battery_assignable_power); // commit\n\n    // Step 3. set output values\n    // configure a CHARGE or DISCHARGE solution \n    let solution = {\n        id: battery.id,\n        mode: isCharging ? CMODE.CHARGE : (assign <= 0 ? CMODE.STOP : CMODE.DISCHARGE), // forcible mode\n        power: Math.round(assign)\n    };\n    // push solution\n    solution_array.push(solution);\n    \n    // update tally\n    unassigned_power -= assign;\n    batteries_total_assignable_power += Number(battery_assignable_power);\n});\n\n// battery discharge priority - put solutions back in initial order\nif (!isCharging && hasReverseDischargePriority) {\n    solution_array.reverse();\n}\n\n// OUTFLOW\nflow.set(\"batteries_total_assignable_power\", batteries_total_assignable_power);\nlogdata += `batteries_total_assignable_power ${batteries_total_assignable_power} | `;\n\n// OUTPUT\nsolution_array.forEach(solution => { \n    logdata += `Solution: ${solution.id}, ${solution.mode} ${solution.power} W | `;\n});\n\n// TWO OUTPUTS\nreturn [\n    { payload: solution_array }, // to Home Battery IO\n    { payload: logdata, logtitle: \"Battery charge scenario\" }    // debug output\n    ]; ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 480,
        "wires": [
            [
                "a97aef91d36d4397"
            ],
            [
                "7929b327617af307"
            ]
        ],
        "inputLabels": [
            "isCharging (boolean)"
        ]
    },
    {
        "id": "caf766d444794032",
        "type": "link in",
        "z": "12a97c65ca14f3e2",
        "g": "94a41a1b6072d1d0",
        "name": "Mapping (from Home Battery IO)",
        "links": [
            "31718411354ec91e"
        ],
        "x": 185,
        "y": 120,
        "wires": [
            [
                "65f41bc0b91d624d",
                "587812601490717b"
            ]
        ]
    },
    {
        "id": "5684d08aca43f51c",
        "type": "comment",
        "z": "12a97c65ca14f3e2",
        "name": "Start",
        "info": "",
        "x": 70,
        "y": 40,
        "wires": []
    },
    {
        "id": "7929b327617af307",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "3ded72deba4915d8",
        "name": "Load distribution",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 540,
        "wires": []
    },
    {
        "id": "a97aef91d36d4397",
        "type": "link out",
        "z": "12a97c65ca14f3e2",
        "g": "3ded72deba4915d8",
        "name": "Load distribution out",
        "mode": "link",
        "links": [
            "85d84b11a51b81b9"
        ],
        "x": 1295,
        "y": 500,
        "wires": []
    },
    {
        "id": "40ed95c84ed14613",
        "type": "api-current-state",
        "z": "12a97c65ca14f3e2",
        "g": "5f4c95f6f7db12fe",
        "name": "Target grid consumption",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_target_grid_consumption_in_w",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_target_grid_consumption_in_w",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 690,
        "y": 60,
        "wires": [
            [
                "32e4715493d0b4ed"
            ]
        ],
        "info": "Set at 0 to strive for zero consumption"
    },
    {
        "id": "32e4715493d0b4ed",
        "type": "api-current-state",
        "z": "12a97c65ca14f3e2",
        "g": "5f4c95f6f7db12fe",
        "name": "Hysteresis",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_hysteresis_in_w",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_hysteresis_in_w",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 890,
        "y": 60,
        "wires": [
            [
                "5da4b44a1b708b78"
            ]
        ]
    },
    {
        "id": "5da4b44a1b708b78",
        "type": "api-current-state",
        "z": "12a97c65ca14f3e2",
        "g": "5f4c95f6f7db12fe",
        "name": "PID P-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_kp",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_kp",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 650,
        "y": 120,
        "wires": [
            [
                "6770bc975dc98f06"
            ]
        ]
    },
    {
        "id": "6770bc975dc98f06",
        "type": "api-current-state",
        "z": "12a97c65ca14f3e2",
        "g": "5f4c95f6f7db12fe",
        "name": "PID I-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_ki",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_ki",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 890,
        "y": 120,
        "wires": [
            [
                "6ffe70e7e4494066"
            ]
        ]
    },
    {
        "id": "6ffe70e7e4494066",
        "type": "api-current-state",
        "z": "12a97c65ca14f3e2",
        "g": "5f4c95f6f7db12fe",
        "name": "PID D-value",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_control_kd",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_control_kd",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1110,
        "y": 120,
        "wires": [
            [
                "20c48c85c10451ef"
            ]
        ]
    },
    {
        "id": "d09392efbcdf82d8",
        "type": "api-current-state",
        "z": "12a97c65ca14f3e2",
        "g": "94a41a1b6072d1d0",
        "name": "P1 power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.p1_meter_vermogen",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "p1_power",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 440,
        "y": 120,
        "wires": [
            [
                "40ed95c84ed14613"
            ]
        ]
    },
    {
        "id": "5b8c898d1f8286a7",
        "type": "switch",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Check for custom/auto mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Manual control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Marstek control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Full control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1735,
        "y": 540,
        "wires": [
            [
                "bef95604dc628eb8",
                "08ba59de316b597d"
            ],
            [
                "bef95604dc628eb8",
                "08ba59de316b597d"
            ],
            [
                "08ba59de316b597d"
            ]
        ],
        "l": false
    },
    {
        "id": "08ba59de316b597d",
        "type": "debug",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Master control switch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 680,
        "wires": []
    },
    {
        "id": "a4bc46361c958b98",
        "type": "server-state-changed",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Master control mode",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_select.marstek_master_battery_mode"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 1610,
        "y": 540,
        "wires": [
            [
                "5b8c898d1f8286a7"
            ]
        ]
    },
    {
        "id": "b3dafbd8ffdd60ea",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Integral PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_i_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1930,
        "y": 520,
        "wires": [
            [
                "9f31979433acbf1f"
            ]
        ]
    },
    {
        "id": "9f31979433acbf1f",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Differential PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_d_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1940,
        "y": 560,
        "wires": [
            [
                "c6fda1fe3fd93ea9"
            ]
        ]
    },
    {
        "id": "bef95604dc628eb8",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Proportinal PID to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_p_term"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1940,
        "y": 480,
        "wires": [
            [
                "b3dafbd8ffdd60ea"
            ]
        ]
    },
    {
        "id": "c6fda1fe3fd93ea9",
        "type": "api-call-service",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "PID Output to zero",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_number.set_value",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_number.house_battery_control_pid_output"
        ],
        "labelId": [],
        "data": "{\"value\": \"0\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": true,
        "domain": "input_number",
        "service": "set_value",
        "x": 1930,
        "y": 600,
        "wires": [
            [
                "c755036a0c7da285"
            ]
        ]
    },
    {
        "id": "c755036a0c7da285",
        "type": "change",
        "z": "12a97c65ca14f3e2",
        "g": "25a20e8266043ec1",
        "name": "Integral sum to zero",
        "rules": [
            {
                "t": "set",
                "p": "I_integral_sum",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f8eddb3e25aa30f8",
        "type": "comment",
        "z": "12a97c65ca14f3e2",
        "name": "Setpoint ramping / verzwakken",
        "info": "Todo or try\n\n- P1 ramping / verzwakken\n- PID MV ramping / verzwakken",
        "x": 290,
        "y": 240,
        "wires": []
    },
    {
        "id": "e426f2cc283e99db",
        "type": "comment",
        "z": "12a97c65ca14f3e2",
        "name": "Gain switching",
        "info": "todo",
        "x": 640,
        "y": 240,
        "wires": []
    },
    {
        "id": "176d29a.6f648d6",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    }
]