[
    {
        "id": "fc3b0636793881be",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "name": "Start",
        "style": {
            "label": true
        },
        "nodes": [
            "1d0932b9cdfe2cc0",
            "057b9222c17d4046",
            "b5940f2c8939de70",
            "981ff4f5a93db632",
            "bcecc2d9b0fe6cad",
            "5faf7aae9da0801e"
        ],
        "x": 34,
        "y": 19,
        "w": 992,
        "h": 122
    },
    {
        "id": "1d0932b9cdfe2cc0",
        "type": "server-state-changed",
        "z": "a099d47fc07b3cee",
        "g": "fc3b0636793881be",
        "name": "P1 meter",
        "server": "176d29a.6f648d6",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "sensor.p1_meter_power"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "num",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": false,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": true,
        "ignoreCurrentStateUnknown": true,
        "ignoreCurrentStateUnavailable": true,
        "outputProperties": [
            {
                "property": "grid_power",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "x": 120,
        "y": 60,
        "wires": [
            [
                "bcecc2d9b0fe6cad"
            ]
        ]
    },
    {
        "id": "057b9222c17d4046",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "fc3b0636793881be",
        "name": "Master Control Mode",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.marstek_master_battery_mode",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "master_mode",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 640,
        "y": 60,
        "wires": [
            [
                "b5940f2c8939de70"
            ]
        ]
    },
    {
        "id": "b5940f2c8939de70",
        "type": "switch",
        "z": "a099d47fc07b3cee",
        "g": "fc3b0636793881be",
        "name": "when in \"Full Control\" mode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Full control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 880,
        "y": 60,
        "wires": [
            [
                "ceb31920f185d64b"
            ]
        ]
    },
    {
        "id": "981ff4f5a93db632",
        "type": "delay",
        "z": "a099d47fc07b3cee",
        "g": "fc3b0636793881be",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.8",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 450,
        "y": 60,
        "wires": [
            [
                "057b9222c17d4046"
            ]
        ],
        "info": "Due to reports of 3 phase connections sending at \r\nintermittend message intervals.\r\n\r\nThis does not improve quality much and mostly\r\nincreases load. \r\n\r\nWe therefor employ a rate limiter."
    },
    {
        "id": "bcecc2d9b0fe6cad",
        "type": "rbe",
        "z": "a099d47fc07b3cee",
        "g": "fc3b0636793881be",
        "name": "On change (2%)",
        "func": "deadband",
        "gap": "2%",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "981ff4f5a93db632",
                "5faf7aae9da0801e"
            ]
        ]
    },
    {
        "id": "5faf7aae9da0801e",
        "type": "debug",
        "z": "a099d47fc07b3cee",
        "g": "fc3b0636793881be",
        "name": "Last processed",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 280,
        "y": 100,
        "wires": []
    },
    {
        "id": "176d29a.6f648d6",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    },
    {
        "id": "a5b8a03b1e2f2371",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "name": "Strategy selection",
        "style": {
            "label": true
        },
        "nodes": [
            "e63433bdfbdd57e9",
            "06dd855a34065b5d",
            "d1bd5fbe28bdd070",
            "b658a34d31bcd8f3",
            "712cd7b2343eead6",
            "7f303dfb944dfc04"
        ],
        "x": 34,
        "y": 419,
        "w": 812,
        "h": 162
    },
    {
        "id": "e63433bdfbdd57e9",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "a5b8a03b1e2f2371",
        "name": "Battery Strategy",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_select.house_battery_strategy",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "house_battery_strategy",
                "propertyType": "flow",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "06dd855a34065b5d"
            ]
        ]
    },
    {
        "id": "06dd855a34065b5d",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "a5b8a03b1e2f2371",
        "name": "Strategy selection",
        "func": "// INFLOW\nlet strategy = flow.get(\"house_battery_strategy\");\n\n// stop on error\nif(msg.batteries === undefined) {\n    node.error(\"Battery configuration undefined\", msg);\n    return null;\n}\nif(strategy === undefined) {\n    node.error(\"Battery strategy undefined\", msg);\n    return null;\n}\n\n// select target flow based on the input_select `house_battery_strategy`\nmsg.target = `${strategy}`;\n\n// add execution marker\nRED.util.setMessageProperty(msg,\"strategy.execution_start\",Date.now()); // when do we start executing the selected strategy\n\n// OUTPUT\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "b658a34d31bcd8f3",
                "d1bd5fbe28bdd070"
            ]
        ]
    },
    {
        "id": "d1bd5fbe28bdd070",
        "type": "link call",
        "z": "a099d47fc07b3cee",
        "g": "a5b8a03b1e2f2371",
        "name": "Call \"Link in\" node",
        "links": [],
        "linkType": "dynamic",
        "timeout": "1.2",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "712cd7b2343eead6",
                "7f303dfb944dfc04"
            ]
        ]
    },
    {
        "id": "b658a34d31bcd8f3",
        "type": "debug",
        "z": "a099d47fc07b3cee",
        "g": "a5b8a03b1e2f2371",
        "name": "Input parameters",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 460,
        "wires": []
    },
    {
        "id": "712cd7b2343eead6",
        "type": "debug",
        "z": "a099d47fc07b3cee",
        "g": "a5b8a03b1e2f2371",
        "name": "Returned solutions",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 500,
        "wires": []
    },
    {
        "id": "7f303dfb944dfc04",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "a5b8a03b1e2f2371",
        "name": "Strategy evaluation",
        "func": "// add execution marker\nlet execution_end = Date.now();\nRED.util.setMessageProperty(msg, \"strategy.execution_end\", execution_end);\n\n// retrieve execution markers\nlet execution_start = RED.util.getMessageProperty(msg,\"strategy.execution_start\");\n\n// report execution time\nif (execution_start !== undefined && execution_end !== undefined) {\n    // exec time\n    let execution_time = (execution_end - execution_start) / 1000; // seconds\n    // report\n    if (execution_time <= 0) node.status({ fill: \"red\", shape: \"dot\", text: `negative or zero timing` });\n    if (execution_time > 0) node.status({ fill: \"green\", shape: \"dot\", text: `${execution_time} sec`});\n    if (execution_time >= 0.7) node.status({ fill: \"yellow\", shape: \"dot\", text: `${execution_time} sec` });\n    if (execution_time >= 1) node.status({ fill: \"red\", shape: \"dot\", text: `${execution_time} sec` });\n\n} else {\n    node.status({fill:\"grey\",shape:\"dot\",text:\"timing error\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 540,
        "wires": [
            [
                "15830b9747f8132e"
            ]
        ]
    },
    {
        "id": "6fad59f7a8530963",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "name": "Get batteries information",
        "style": {
            "label": true
        },
        "nodes": [
            "dbe474c91266b428",
            "7d6705c1829e0683",
            "1933f2623fa0fffb",
            "ceb31920f185d64b",
            "b63f2e905b829e5b",
            "64a533741de02153",
            "bbe037f4bc3425fc"
        ],
        "x": 28,
        "y": 159,
        "w": 1564,
        "h": 242
    },
    {
        "id": "dbe474c91266b428",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Loop start",
        "func": "// loop through the number of batteries set by the user\nmsg.battery_index = 1; // base-1\n\n// Init an array for battery status and value information\nmsg.batteries = [];\n\n// Continue\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "a91127871ba39241"
            ]
        ]
    },
    {
        "id": "7d6705c1829e0683",
        "type": "switch",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Loop until",
        "property": "battery_index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "battery_count",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 360,
        "wires": [
            [
                "a91127871ba39241"
            ],
            [
                "1933f2623fa0fffb",
                "e63433bdfbdd57e9"
            ]
        ]
    },
    {
        "id": "1933f2623fa0fffb",
        "type": "debug",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Loop result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 360,
        "wires": []
    },
    {
        "id": "ceb31920f185d64b",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Your battery count",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_number.house_battery_count",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "battery_count",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "dbe474c91266b428"
            ]
        ]
    },
    {
        "id": "b63f2e905b829e5b",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Loop",
        "style": {
            "label": true
        },
        "nodes": [
            "a91127871ba39241",
            "325f396f7e8ad2a8",
            "d01fc0ee854e249a",
            "a49e9a91bbfcb11d",
            "22123f145efcd95c",
            "f384e6c0da2834c8",
            "08d4efea54467ac1",
            "7831dd84510fdfaa",
            "4e53830356f33b07"
        ],
        "x": 54,
        "y": 239,
        "w": 1512,
        "h": 82
    },
    {
        "id": "a91127871ba39241",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "Control mode",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "select.marstek_m{{battery_index}}_rs485_control_mode",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "rs485_control_mode",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "4e53830356f33b07"
            ]
        ]
    },
    {
        "id": "325f396f7e8ad2a8",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "SoC",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m{{battery_index}}_battery_state_of_charge",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "battery_state_of_charge",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 850,
        "y": 280,
        "wires": [
            [
                "a49e9a91bbfcb11d"
            ]
        ]
    },
    {
        "id": "d01fc0ee854e249a",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "Inverter state",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m{{battery_index}}_inverter_state",
        "state_type": "str",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "inverter_state",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "08d4efea54467ac1"
            ]
        ]
    },
    {
        "id": "a49e9a91bbfcb11d",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "SoC min",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m{{battery_index}}_discharging_cutoff_capacity",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "discharging_cutoff_capacity",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 980,
        "y": 280,
        "wires": [
            [
                "22123f145efcd95c"
            ]
        ]
    },
    {
        "id": "22123f145efcd95c",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "SoC max",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m{{battery_index}}_charging_cutoff_capacity",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "charging_cutoff_capacity",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1120,
        "y": 280,
        "wires": [
            [
                "d01fc0ee854e249a"
            ]
        ]
    },
    {
        "id": "f384e6c0da2834c8",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "Max discharge power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m{{battery_index}}_max_discharge_power",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "max_discharge_power",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 680,
        "y": 280,
        "wires": [
            [
                "325f396f7e8ad2a8"
            ]
        ]
    },
    {
        "id": "08d4efea54467ac1",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "Capacity remaining",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m{{battery_index}}_battery_remaining_capacity",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "battery_remaining_capacity",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1450,
        "y": 280,
        "wires": [
            [
                "64a533741de02153"
            ]
        ]
    },
    {
        "id": "7831dd84510fdfaa",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "Max charge power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.marstek_m{{battery_index}}_max_charge_power",
        "state_type": "num",
        "blockInputOverrides": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "max_charge_power",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "f384e6c0da2834c8"
            ]
        ]
    },
    {
        "id": "4e53830356f33b07",
        "type": "api-current-state",
        "z": "a099d47fc07b3cee",
        "g": "b63f2e905b829e5b",
        "name": "Power",
        "server": "176d29a.6f648d6",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.marstek_m{{battery_index}}_battery_power",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            },
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "battery_power",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "7831dd84510fdfaa"
            ]
        ]
    },
    {
        "id": "64a533741de02153",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Mapping",
        "func": "// Map to batteries array\nmsg.batteries.push({\n    id: `M${msg.battery_index}`,\n    power: parseInt(msg.battery_power,10),\n    charging_max: parseInt(msg.max_charge_power,10),\n    discharging_max: parseInt(msg.max_discharge_power,10),\n    soc: parseInt(msg.battery_state_of_charge,10),\n    soc_max: parseInt(msg.charging_cutoff_capacity,10),\n    soc_min: parseInt(msg.discharging_cutoff_capacity,10),\n    inverter: String(msg.inverter_state),\n    cap_remaining: Number(msg.battery_remaining_capacity),\n    rs485: String(msg.rs485_control_mode)\n    });\n\n// Continue\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 360,
        "wires": [
            [
                "bbe037f4bc3425fc"
            ]
        ]
    },
    {
        "id": "bbe037f4bc3425fc",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "6fad59f7a8530963",
        "name": "Loop step",
        "func": "// Step index down\nmsg.battery_index += 1;\n\n// Continue\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "7d6705c1829e0683"
            ]
        ]
    },
    {
        "id": "ea78c084bba20424",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "name": "On start",
        "style": {
            "label": true
        },
        "nodes": [
            "ad80dc99baec6552",
            "42d70237afb8b3a7"
        ],
        "x": 1074,
        "y": 19,
        "w": 412,
        "h": 82
    },
    {
        "id": "ad80dc99baec6552",
        "type": "api-call-service",
        "z": "a099d47fc07b3cee",
        "g": "ea78c084bba20424",
        "name": "Node-RED status: ON",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.house_battery_control_has_node_red"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 1360,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "42d70237afb8b3a7",
        "type": "inject",
        "z": "a099d47fc07b3cee",
        "g": "ea78c084bba20424",
        "name": "On start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 60,
        "wires": [
            [
                "ad80dc99baec6552"
            ]
        ]
    },
    {
        "id": "5778369e644d84d7",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "name": "Set Batteries",
        "style": {
            "label": true
        },
        "nodes": [
            "95295516124d818d",
            "4d6fd96944872ba1",
            "15830b9747f8132e",
            "d77f3b233b9d9a45",
            "8b0aa863bb6493fd",
            "77163ca9f43e8fb7"
        ],
        "x": 54,
        "y": 599,
        "w": 838,
        "h": 342
    },
    {
        "id": "95295516124d818d",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "5778369e644d84d7",
        "name": "Loop start",
        "func": "// loop through the number of batteries set by the user\nmsg.battery_index = msg.battery_count;\n\n// Debug\nRED.util.setMessageProperty(msg, \"debug\", `## Cohort ${Date.now()} ##`);\n\n// Continue\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 720,
        "wires": [
            [
                "047542bb597a3048"
            ]
        ]
    },
    {
        "id": "4d6fd96944872ba1",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "5778369e644d84d7",
        "name": "timing start",
        "func": "RED.util.setMessageProperty(msg,\"setbatteries.execution_start\",Date.now());\nRED.util.setMessageProperty(msg,\"setbatteries.marker\", `M1_${Date.now()}`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 680,
        "wires": [
            [
                "95295516124d818d"
            ]
        ]
    },
    {
        "id": "15830b9747f8132e",
        "type": "switch",
        "z": "a099d47fc07b3cee",
        "g": "5778369e644d84d7",
        "name": "solutions present",
        "property": "solutions",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 640,
        "wires": [
            [
                "4d6fd96944872ba1"
            ]
        ]
    },
    {
        "id": "d77f3b233b9d9a45",
        "type": "group",
        "z": "a099d47fc07b3cee",
        "g": "5778369e644d84d7",
        "name": "Loop",
        "style": {
            "label": true
        },
        "nodes": [
            "e1927196c4198cbf",
            "047542bb597a3048",
            "df4b99688f85df0a",
            "e25994f6e85e901c",
            "4decf8d91d6ccacb",
            "084ac27446297f16",
            "1e4f762143a12bba"
        ],
        "x": 314,
        "y": 639,
        "w": 552,
        "h": 222
    },
    {
        "id": "e1927196c4198cbf",
        "type": "api-call-service",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "Set mode (charge/discharge/stop)",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_text",
        "service": "set_value",
        "x": 660,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "047542bb597a3048",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "Set Batteries",
        "func": "// enums\nconst CMODE = {\n    STOP: \"stop\", // Marstek batteries disconnect a relay when this is set or Power is 0W\n    CHARGE: \"charge\",\n    DISCHARGE: \"discharge\"\n}\n\n// Output format and target\nlet outputArray = [];\nlet solution = msg.solutions[msg.battery_index-1]; // Base-0, thus -1\nif(solution === undefined) {\n    node.error(`Can't find solution for index ${msg.battery_index - 1} in ${msg.solutions}, aborting...`);\n    return null;\n}\nlet target = `marstek_${solution.id.toLowerCase()}`;\n\n// Safety | Id exists\nlet battery = msg.batteries.find(battery => battery.id === solution.id);\nif (battery === undefined) {\n    node.error(`Can't set battery ${solution.id}, aborting...`);\n    return null;\n}\n// Safety | Power limit\nsolution.power = Math.min(solution.power, solution.mode == CMODE.CHARGE ? battery.charging_max: battery.discharging_max);\n\n// Set | Mode\nconst serviceCallMode = {\n    \"action\": \"select.select_option\",\n    \"target\": {\n        \"entity_id\": [`select.${target}_forcible_charge_discharge`]\n    },\n    \"data\": {\n         \"option\": String(solution.mode) // forced charge mode (stop, charge, discharge)\n    }\n};\n// Add topic to allow correct 'on change' filtering\noutputArray.push({payload: serviceCallMode, topic:solution.id});\n\n// Set | Power\nconst serviceCallPower = {\n    \"action\": \"number.set_value\",\n    \"target\": {\n        \"entity_id\": [\n            `number.${target}_forcible_charge_power`,\n            `number.${target}_forcible_discharge_power`\n            ]\n    },\n    \"data\": {\n        \"value\": Number(solution.power)\n    } \n};\n// Add topic to allow correct 'on change' filtering\noutputArray.push({payload: serviceCallPower, topic:solution.id});\n\n// Store service calls in msg to allow checking of loop results\nmsg.loop_result = { target, serviceCallMode, serviceCallPower };\n\n// Return msg as third output\noutputArray.push(msg);\n\n// Output\nreturn outputArray;",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 720,
        "wires": [
            [
                "e1927196c4198cbf"
            ],
            [
                "1e4f762143a12bba"
            ],
            [
                "e25994f6e85e901c"
            ]
        ],
        "inputLabels": [
            "Msg with a battery_index"
        ],
        "outputLabels": [
            "Select MODE",
            "Set POWER",
            "Msg"
        ]
    },
    {
        "id": "df4b99688f85df0a",
        "type": "switch",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "Loop until",
        "property": "battery_index",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 780,
        "wires": [
            [
                "047542bb597a3048"
            ],
            [
                "8b0aa863bb6493fd"
            ]
        ]
    },
    {
        "id": "e25994f6e85e901c",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "Loop step",
        "func": "// Step index down\nmsg.battery_index -= 1;\n\n// Continue\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 780,
        "wires": [
            [
                "df4b99688f85df0a",
                "084ac27446297f16"
            ]
        ]
    },
    {
        "id": "4decf8d91d6ccacb",
        "type": "api-call-service",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "Set power (W)",
        "server": "176d29a.6f648d6",
        "version": 7,
        "debugenabled": false,
        "action": "",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_text",
        "service": "set_value",
        "x": 760,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "084ac27446297f16",
        "type": "debug",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "Step result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "loop_result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 820,
        "wires": []
    },
    {
        "id": "1e4f762143a12bba",
        "type": "rbe",
        "z": "a099d47fc07b3cee",
        "g": "d77f3b233b9d9a45",
        "name": "on change",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 590,
        "y": 720,
        "wires": [
            [
                "4decf8d91d6ccacb"
            ]
        ]
    },
    {
        "id": "8b0aa863bb6493fd",
        "type": "function",
        "z": "a099d47fc07b3cee",
        "g": "5778369e644d84d7",
        "name": "timing end",
        "func": "let start = RED.util.getMessageProperty(msg,\"setbatteries.execution_start\");\nlet end = Date.now();\nlet delta = end - start;\nlet timingString = `${delta/1000} sec`;\n\nnode.status({fill:\"green\",shape:\"dot\",text: timingString});\nmsg.delta = delta;\nmsg.timing = timingString;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 840,
        "wires": [
            [
                "77163ca9f43e8fb7"
            ]
        ]
    },
    {
        "id": "77163ca9f43e8fb7",
        "type": "debug",
        "z": "a099d47fc07b3cee",
        "g": "5778369e644d84d7",
        "name": "Done",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "debug",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 900,
        "wires": []
    }
]