# Sensor that calculates how long the batteries can still discharge, keeping in mind that batteries should not go below 11%
- sensor:
    # Total power delivered by all batteries
    - name: "House Total Battery Power"
      unique_id: "house_total_battery_power_in_w"
      state_class: measurement
      device_class: "power"
      unit_of_measurement: "W"
      state: >
        {# Configuration #}
        {% set bat_entities = [
          'sensor.marstek_m1_battery_power', 
          'sensor.marstek_m2_battery_power',
          'sensor.marstek_m3_battery_power' 
        ] %}

        {# Filter entities on valid values and retrieve power #}
        {% set available_powers = expand(bat_entities) 
          | selectattr('state', 'is_number') 
          | map(attribute='state') 
          | map('float', 0) 
          | list 
        %}

        {# Check if any battery power sensor is available #}
        {% if available_powers | length > 0 %}
          {# Sum all available power readings #}
          {% set total_power = available_powers | sum %}
          {# Marstek uses negative power when delivering power, positive when charging. This is inverse from what HA expects.#}
          {{ (total_power * -1) | round(2) }}
        {% else %}
          unavailable
        {% endif %}

    # Energy remaining
    - name: "House Total Battery Energy remaining"
      unique_id: "house_total_battery_energy_remaining"
      device_class: "energy"
      unit_of_measurement: "kWh"
      state: >
        {# Configuration #}
        {% set BATTERY_CAPACITY_KWH = 5.12 %}
        {% set MIN_DISCHARGE_SOC = 12.0 | float %}
        {% set bat_entities = [
          'sensor.marstek_m1_battery_state_of_charge', 
          'sensor.marstek_m2_battery_state_of_charge',
          'sensor.marstek_m3_battery_state_of_charge' 
        ] %}

        {# Filter entities on valid values and retrieve SoC #}
        {% set available_socs = expand(bat_entities) 
          | selectattr('state', 'is_number') 
          | map(attribute='state') 
          | map('float', 0) 
          | list 
        %}

        {# Calculate total battery energy #}
        {% if available_socs | length > 0 %}
          {% set total_soc = available_socs | sum %}
          {% set num_batteries = available_socs | length %}
          
          {# Total usable SoC in % #}
          {% set total_usable_soc = total_soc - (num_batteries * MIN_DISCHARGE_SOC) %}
          
          {# Total usable energy in kWh #}
          {% set total_usable_energy = (total_usable_soc / 100) * (num_batteries * BATTERY_CAPACITY_KWH) %}
          
          {{ total_usable_energy | round(1) }}
        {% else %}
          unavailable
        {% endif %}

    # Time Remaining
    - name: "Battery time remaining"
      unique_id: house_battery_time_remaining
      state: >
        {% set power = max(0, states('sensor.house_total_battery_power_in_w') | float(0)) %}
        {% set capacity_kwh = states('sensor.house_total_battery_energy_remaining') | float(0) %}
        {% if power > 0 and capacity_kwh > 0 %}
          {% set time_hrs = (capacity_kwh * 1000) / power %}
          {% set hrs = time_hrs | int %}
          {% set minutes = ((time_hrs - hrs) * 60) | round(0) | int %}
          {{ '{:02}:{:02}'.format(hrs, minutes) }} hours
        {% else %}
          Idle/Charging
        {% endif %}